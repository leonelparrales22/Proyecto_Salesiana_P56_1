import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { Subscription } from 'rxjs';
import { DataSource } from '../../lib/data-source/data-source';
import * as ɵngcc0 from '@angular/core';
export declare class PagerComponent implements OnChanges {
    source: DataSource;
    perPageSelect: any[];
    changePage: EventEmitter<any>;
    currentPerPage: any;
    protected pages: Array<any>;
    protected page: number;
    protected count: number;
    protected perPage: number;
    protected dataChangedSub: Subscription;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * We change the page here depending on the action performed against data source
     * if a new element was added to the end of the table - then change the page to the last
     * if a new element was added to the beginning of the table - then to the first page
     * @param changes
     */
    processPageChange(changes: any): void;
    shouldShow(): boolean;
    paginate(page: number): boolean;
    next(): boolean;
    prev(): boolean;
    getPage(): number;
    getPages(): Array<any>;
    getLast(): number;
    isPageOutOfBounce(): boolean;
    initPages(): void;
    onChangePerPage(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PagerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PagerComponent, "ng2-smart-table-pager", never, {
    "perPageSelect": "perPageSelect";
    "source": "source";
}, {
    "changePage": "changePage";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBhZ2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRGF0YVNvdXJjZSB9IGZyb20gJy4uLy4uL2xpYi9kYXRhLXNvdXJjZS9kYXRhLXNvdXJjZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYWdlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgc291cmNlOiBEYXRhU291cmNlO1xuICAgIHBlclBhZ2VTZWxlY3Q6IGFueVtdO1xuICAgIGNoYW5nZVBhZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGN1cnJlbnRQZXJQYWdlOiBhbnk7XG4gICAgcHJvdGVjdGVkIHBhZ2VzOiBBcnJheTxhbnk+O1xuICAgIHByb3RlY3RlZCBwYWdlOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGNvdW50OiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIHBlclBhZ2U6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgZGF0YUNoYW5nZWRTdWI6IFN1YnNjcmlwdGlvbjtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBXZSBjaGFuZ2UgdGhlIHBhZ2UgaGVyZSBkZXBlbmRpbmcgb24gdGhlIGFjdGlvbiBwZXJmb3JtZWQgYWdhaW5zdCBkYXRhIHNvdXJjZVxuICAgICAqIGlmIGEgbmV3IGVsZW1lbnQgd2FzIGFkZGVkIHRvIHRoZSBlbmQgb2YgdGhlIHRhYmxlIC0gdGhlbiBjaGFuZ2UgdGhlIHBhZ2UgdG8gdGhlIGxhc3RcbiAgICAgKiBpZiBhIG5ldyBlbGVtZW50IHdhcyBhZGRlZCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0YWJsZSAtIHRoZW4gdG8gdGhlIGZpcnN0IHBhZ2VcbiAgICAgKiBAcGFyYW0gY2hhbmdlc1xuICAgICAqL1xuICAgIHByb2Nlc3NQYWdlQ2hhbmdlKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgc2hvdWxkU2hvdygpOiBib29sZWFuO1xuICAgIHBhZ2luYXRlKHBhZ2U6IG51bWJlcik6IGJvb2xlYW47XG4gICAgbmV4dCgpOiBib29sZWFuO1xuICAgIHByZXYoKTogYm9vbGVhbjtcbiAgICBnZXRQYWdlKCk6IG51bWJlcjtcbiAgICBnZXRQYWdlcygpOiBBcnJheTxhbnk+O1xuICAgIGdldExhc3QoKTogbnVtYmVyO1xuICAgIGlzUGFnZU91dE9mQm91bmNlKCk6IGJvb2xlYW47XG4gICAgaW5pdFBhZ2VzKCk6IHZvaWQ7XG4gICAgb25DaGFuZ2VQZXJQYWdlKGV2ZW50OiBhbnkpOiB2b2lkO1xufVxuIl19