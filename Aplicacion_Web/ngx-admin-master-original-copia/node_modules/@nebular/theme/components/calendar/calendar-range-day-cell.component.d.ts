/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { EventEmitter } from '@angular/core';
import { NbCalendarCell, NbCalendarSize, NbCalendarSizeValues } from '../calendar-kit/model';
import { NbCalendarRange } from './calendar-range.component';
import { NbDateService } from '../calendar-kit/services/date.service';
import { NbBaseCalendarRangeCell } from './base-calendar-range-cell';
import * as ɵngcc0 from '@angular/core';
export declare class NbCalendarRangeDayCellComponent<D> extends NbBaseCalendarRangeCell<D> implements NbCalendarCell<D, NbCalendarRange<D>> {
    protected dateService: NbDateService<D>;
    date: D;
    selectedValue: NbCalendarRange<D>;
    visibleDate: D;
    min: D;
    max: D;
    filter: (D: any) => boolean;
    size: NbCalendarSize;
    static ngAcceptInputType_size: NbCalendarSizeValues;
    select: EventEmitter<D>;
    constructor(dateService: NbDateService<D>);
    get inRange(): boolean;
    get start(): boolean;
    get end(): boolean;
    rangeCellClass: boolean;
    dayCellClass: boolean;
    get today(): boolean;
    get boundingMonth(): boolean;
    get selected(): boolean;
    get empty(): boolean;
    get disabled(): boolean;
    get isLarge(): boolean;
    get day(): number;
    onClick(): void;
    protected smallerThanMin(): boolean;
    protected greaterThanMax(): boolean;
    protected dontFitFilter(): boolean;
    protected isInRange(date: D, { start, end }: NbCalendarRange<D>): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbCalendarRangeDayCellComponent<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbCalendarRangeDayCellComponent<any>, "nb-calendar-range-day-cell", never, {
    "size": "size";
    "date": "date";
    "selectedValue": "selectedValue";
    "visibleDate": "visibleDate";
    "min": "min";
    "max": "max";
    "filter": "filter";
}, {
    "select": "select";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItcmFuZ2UtZGF5LWNlbGwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNhbGVuZGFyLXJhbmdlLWRheS1jZWxsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZCQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmJDYWxlbmRhckNlbGwsIE5iQ2FsZW5kYXJTaXplLCBOYkNhbGVuZGFyU2l6ZVZhbHVlcyB9IGZyb20gJy4uL2NhbGVuZGFyLWtpdC9tb2RlbCc7XG5pbXBvcnQgeyBOYkNhbGVuZGFyUmFuZ2UgfSBmcm9tICcuL2NhbGVuZGFyLXJhbmdlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOYkRhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vY2FsZW5kYXIta2l0L3NlcnZpY2VzL2RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBOYkJhc2VDYWxlbmRhclJhbmdlQ2VsbCB9IGZyb20gJy4vYmFzZS1jYWxlbmRhci1yYW5nZS1jZWxsJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iQ2FsZW5kYXJSYW5nZURheUNlbGxDb21wb25lbnQ8RD4gZXh0ZW5kcyBOYkJhc2VDYWxlbmRhclJhbmdlQ2VsbDxEPiBpbXBsZW1lbnRzIE5iQ2FsZW5kYXJDZWxsPEQsIE5iQ2FsZW5kYXJSYW5nZTxEPj4ge1xuICAgIHByb3RlY3RlZCBkYXRlU2VydmljZTogTmJEYXRlU2VydmljZTxEPjtcbiAgICBkYXRlOiBEO1xuICAgIHNlbGVjdGVkVmFsdWU6IE5iQ2FsZW5kYXJSYW5nZTxEPjtcbiAgICB2aXNpYmxlRGF0ZTogRDtcbiAgICBtaW46IEQ7XG4gICAgbWF4OiBEO1xuICAgIGZpbHRlcjogKEQ6IGFueSkgPT4gYm9vbGVhbjtcbiAgICBzaXplOiBOYkNhbGVuZGFyU2l6ZTtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfc2l6ZTogTmJDYWxlbmRhclNpemVWYWx1ZXM7XG4gICAgc2VsZWN0OiBFdmVudEVtaXR0ZXI8RD47XG4gICAgY29uc3RydWN0b3IoZGF0ZVNlcnZpY2U6IE5iRGF0ZVNlcnZpY2U8RD4pO1xuICAgIGdldCBpblJhbmdlKCk6IGJvb2xlYW47XG4gICAgZ2V0IHN0YXJ0KCk6IGJvb2xlYW47XG4gICAgZ2V0IGVuZCgpOiBib29sZWFuO1xuICAgIHJhbmdlQ2VsbENsYXNzOiBib29sZWFuO1xuICAgIGRheUNlbGxDbGFzczogYm9vbGVhbjtcbiAgICBnZXQgdG9kYXkoKTogYm9vbGVhbjtcbiAgICBnZXQgYm91bmRpbmdNb250aCgpOiBib29sZWFuO1xuICAgIGdldCBzZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIGdldCBlbXB0eSgpOiBib29sZWFuO1xuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIGdldCBpc0xhcmdlKCk6IGJvb2xlYW47XG4gICAgZ2V0IGRheSgpOiBudW1iZXI7XG4gICAgb25DbGljaygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzbWFsbGVyVGhhbk1pbigpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBncmVhdGVyVGhhbk1heCgpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBkb250Rml0RmlsdGVyKCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGlzSW5SYW5nZShkYXRlOiBELCB7IHN0YXJ0LCBlbmQgfTogTmJDYWxlbmRhclJhbmdlPEQ+KTogYm9vbGVhbjtcbn1cbiJdfQ==