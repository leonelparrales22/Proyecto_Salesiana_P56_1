import { AfterContentInit, EventEmitter, OnDestroy, QueryList, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Subject } from 'rxjs';
import { NbBooleanInput } from '../helpers';
import { NbRadioComponent } from './radio.component';
import { NbComponentStatus } from '../component-status';
/**
 * The `NbRadioGroupComponent` is the wrapper for `nb-radio` button.
 * It provides form bindings:
 *
 * ```html
 * <nb-radio-group [(ngModel)]="selectedOption">
 *   <nb-radio value="1">Option 1</nb-radio>
 *   <nb-radio value="2">Option 2</nb-radio>
 *   <nb-radio value="3">Option 3</nb-radio>
 * </nb-radio-group>
 * ```
 *
 * Also, you can use `value` and `valueChange` for binding without forms.
 *
 * ```html
 * <nb-radio-group [(value)]="selectedOption">
 *   <nb-radio value="1">Option 1</nb-radio>
 *   <nb-radio value="2">Option 2</nb-radio>
 *   <nb-radio value="3">Option 3</nb-radio>
 * </nb-radio-group>
 * ```
 *
 * Radio items name has to be provided through `name` input property of the radio group.
 *
 * ```html
 * <nb-radio-group name="my-radio-group">
 *   ...
 * </nb-radio-group>
 * ```
 *
 * You can change radio group status by setting `status` input.
 * @stacked-example(Statuses, radio/radio-statuses.component)
 *
 * Also, you can disable the whole group using `disabled` attribute.
 * @stacked-example(Disabled group, radio/radio-disabled-group.component)
 *
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbRadioGroupComponent implements AfterContentInit, OnDestroy, ControlValueAccessor {
    protected hostElement: ElementRef<HTMLElement>;
    protected platformId: any;
    protected document: any;
    protected destroy$: Subject<void>;
    protected onChange: (value: any) => void;
    protected onTouched: () => void;
    get value(): any;
    set value(value: any);
    protected _value: any;
    get name(): string;
    set name(name: string);
    protected _name: string;
    get disabled(): boolean;
    set disabled(disabled: boolean);
    protected _disabled: boolean;
    static ngAcceptInputType_disabled: NbBooleanInput;
    /**
     * Radio buttons status.
     * Possible values are `primary` (default), `success`, `warning`, `danger`, `info`.
     */
    get status(): NbComponentStatus;
    set status(value: NbComponentStatus);
    protected _status: NbComponentStatus;
    radios: QueryList<NbRadioComponent>;
    valueChange: EventEmitter<any>;
    constructor(hostElement: ElementRef<HTMLElement>, platformId: any, document: any);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    protected updateAndSubscribeToRadios(): void;
    protected updateNames(): void;
    protected updateValues(): void;
    protected updateDisabled(): void;
    protected subscribeOnRadiosValueChange(): void;
    protected propagateValue(value: any): void;
    protected subscribeOnRadiosBlur(): void;
    protected updateStatus(): void;
    protected updateAndMarkForCheckRadios(updateFn: (NbRadioComponent: any) => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbRadioGroupComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbRadioGroupComponent, "nb-radio-group", never, {
    "value": "value";
    "name": "name";
    "disabled": "disabled";
    "status": "status";
}, {
    "valueChange": "valueChange";
}, ["radios"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInJhZGlvLWdyb3VwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5Q0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgUXVlcnlMaXN0LCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5iQm9vbGVhbklucHV0IH0gZnJvbSAnLi4vaGVscGVycyc7XG5pbXBvcnQgeyBOYlJhZGlvQ29tcG9uZW50IH0gZnJvbSAnLi9yYWRpby5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmJDb21wb25lbnRTdGF0dXMgfSBmcm9tICcuLi9jb21wb25lbnQtc3RhdHVzJztcbi8qKlxuICogVGhlIGBOYlJhZGlvR3JvdXBDb21wb25lbnRgIGlzIHRoZSB3cmFwcGVyIGZvciBgbmItcmFkaW9gIGJ1dHRvbi5cbiAqIEl0IHByb3ZpZGVzIGZvcm0gYmluZGluZ3M6XG4gKlxuICogYGBgaHRtbFxuICogPG5iLXJhZGlvLWdyb3VwIFsobmdNb2RlbCldPVwic2VsZWN0ZWRPcHRpb25cIj5cbiAqICAgPG5iLXJhZGlvIHZhbHVlPVwiMVwiPk9wdGlvbiAxPC9uYi1yYWRpbz5cbiAqICAgPG5iLXJhZGlvIHZhbHVlPVwiMlwiPk9wdGlvbiAyPC9uYi1yYWRpbz5cbiAqICAgPG5iLXJhZGlvIHZhbHVlPVwiM1wiPk9wdGlvbiAzPC9uYi1yYWRpbz5cbiAqIDwvbmItcmFkaW8tZ3JvdXA+XG4gKiBgYGBcbiAqXG4gKiBBbHNvLCB5b3UgY2FuIHVzZSBgdmFsdWVgIGFuZCBgdmFsdWVDaGFuZ2VgIGZvciBiaW5kaW5nIHdpdGhvdXQgZm9ybXMuXG4gKlxuICogYGBgaHRtbFxuICogPG5iLXJhZGlvLWdyb3VwIFsodmFsdWUpXT1cInNlbGVjdGVkT3B0aW9uXCI+XG4gKiAgIDxuYi1yYWRpbyB2YWx1ZT1cIjFcIj5PcHRpb24gMTwvbmItcmFkaW8+XG4gKiAgIDxuYi1yYWRpbyB2YWx1ZT1cIjJcIj5PcHRpb24gMjwvbmItcmFkaW8+XG4gKiAgIDxuYi1yYWRpbyB2YWx1ZT1cIjNcIj5PcHRpb24gMzwvbmItcmFkaW8+XG4gKiA8L25iLXJhZGlvLWdyb3VwPlxuICogYGBgXG4gKlxuICogUmFkaW8gaXRlbXMgbmFtZSBoYXMgdG8gYmUgcHJvdmlkZWQgdGhyb3VnaCBgbmFtZWAgaW5wdXQgcHJvcGVydHkgb2YgdGhlIHJhZGlvIGdyb3VwLlxuICpcbiAqIGBgYGh0bWxcbiAqIDxuYi1yYWRpby1ncm91cCBuYW1lPVwibXktcmFkaW8tZ3JvdXBcIj5cbiAqICAgLi4uXG4gKiA8L25iLXJhZGlvLWdyb3VwPlxuICogYGBgXG4gKlxuICogWW91IGNhbiBjaGFuZ2UgcmFkaW8gZ3JvdXAgc3RhdHVzIGJ5IHNldHRpbmcgYHN0YXR1c2AgaW5wdXQuXG4gKiBAc3RhY2tlZC1leGFtcGxlKFN0YXR1c2VzLCByYWRpby9yYWRpby1zdGF0dXNlcy5jb21wb25lbnQpXG4gKlxuICogQWxzbywgeW91IGNhbiBkaXNhYmxlIHRoZSB3aG9sZSBncm91cCB1c2luZyBgZGlzYWJsZWRgIGF0dHJpYnV0ZS5cbiAqIEBzdGFja2VkLWV4YW1wbGUoRGlzYWJsZWQgZ3JvdXAsIHJhZGlvL3JhZGlvLWRpc2FibGVkLWdyb3VwLmNvbXBvbmVudClcbiAqXG4gKiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJSYWRpb0dyb3VwQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJvdGVjdGVkIGhvc3RFbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcbiAgICBwcm90ZWN0ZWQgcGxhdGZvcm1JZDogYW55O1xuICAgIHByb3RlY3RlZCBkb2N1bWVudDogYW55O1xuICAgIHByb3RlY3RlZCBkZXN0cm95JDogU3ViamVjdDx2b2lkPjtcbiAgICBwcm90ZWN0ZWQgb25DaGFuZ2U6ICh2YWx1ZTogYW55KSA9PiB2b2lkO1xuICAgIHByb3RlY3RlZCBvblRvdWNoZWQ6ICgpID0+IHZvaWQ7XG4gICAgZ2V0IHZhbHVlKCk6IGFueTtcbiAgICBzZXQgdmFsdWUodmFsdWU6IGFueSk7XG4gICAgcHJvdGVjdGVkIF92YWx1ZTogYW55O1xuICAgIGdldCBuYW1lKCk6IHN0cmluZztcbiAgICBzZXQgbmFtZShuYW1lOiBzdHJpbmcpO1xuICAgIHByb3RlY3RlZCBfbmFtZTogc3RyaW5nO1xuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIHNldCBkaXNhYmxlZChkaXNhYmxlZDogYm9vbGVhbik7XG4gICAgcHJvdGVjdGVkIF9kaXNhYmxlZDogYm9vbGVhbjtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfZGlzYWJsZWQ6IE5iQm9vbGVhbklucHV0O1xuICAgIC8qKlxuICAgICAqIFJhZGlvIGJ1dHRvbnMgc3RhdHVzLlxuICAgICAqIFBvc3NpYmxlIHZhbHVlcyBhcmUgYHByaW1hcnlgIChkZWZhdWx0KSwgYHN1Y2Nlc3NgLCBgd2FybmluZ2AsIGBkYW5nZXJgLCBgaW5mb2AuXG4gICAgICovXG4gICAgZ2V0IHN0YXR1cygpOiBOYkNvbXBvbmVudFN0YXR1cztcbiAgICBzZXQgc3RhdHVzKHZhbHVlOiBOYkNvbXBvbmVudFN0YXR1cyk7XG4gICAgcHJvdGVjdGVkIF9zdGF0dXM6IE5iQ29tcG9uZW50U3RhdHVzO1xuICAgIHJhZGlvczogUXVlcnlMaXN0PE5iUmFkaW9Db21wb25lbnQ+O1xuICAgIHZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb25zdHJ1Y3Rvcihob3N0RWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIHBsYXRmb3JtSWQ6IGFueSwgZG9jdW1lbnQ6IGFueSk7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZUFuZFN1YnNjcmliZVRvUmFkaW9zKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZU5hbWVzKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZVZhbHVlcygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVEaXNhYmxlZCgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzdWJzY3JpYmVPblJhZGlvc1ZhbHVlQ2hhbmdlKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHByb3BhZ2F0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzdWJzY3JpYmVPblJhZGlvc0JsdXIoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlU3RhdHVzKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZUFuZE1hcmtGb3JDaGVja1JhZGlvcyh1cGRhdGVGbjogKE5iUmFkaW9Db21wb25lbnQ6IGFueSkgPT4gdm9pZCk6IHZvaWQ7XG59XG4iXX0=