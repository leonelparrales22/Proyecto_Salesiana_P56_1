/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { OnDestroy, OnInit, ElementRef, SimpleChanges, OnChanges, DoCheck, AfterViewInit, Renderer2, NgZone } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import { NbBooleanInput } from '../helpers';
import { NbComponentSize } from '../component-size';
import { NbComponentShape } from '../component-shape';
import { NbComponentStatus } from '../component-status';
import { NbFormFieldControl } from '../form-field/form-field-control';
import { NbFocusMonitor } from '../cdk/a11y/a11y.module';
/**
 * Basic input directive.
 *
 * ```html
 * <input nbInput></input>
 * ```
 *
 * ### Installation
 *
 * Import `NbInputModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbInputModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Default input size is `medium`:
 * @stacked-example(Showcase, input/input-showcase.component)
 *
 * Inputs are available in multiple colors using `status` property:
 * @stacked-example(Input Colors, input/input-colors.component)
 *
 * There are three input sizes:
 *
 * @stacked-example(Input Sizes, input/input-sizes.component)
 *
 * Inputs available in different shapes, which could be combined with the other properties:
 * @stacked-example(Input Shapes, input/input-shapes.component)
 *
 * `nbInput` could be applied to the following selectors - `input`, `textarea`:
 * @stacked-example(Input Elements, input/input-types.component)
 *
 * You can add `fullWidth` attribute to make element fill container:
 * @stacked-example(Full width inputs, input/input-full-width.component)
 *
 * Or you can bind control with form controls or ngModel:
 * @stacked-example(Input form binding, input/input-form.component)
 *
 * Use `<nb-form-field>` to add custom content to the input field.
 * First import `NbFormFieldModule`. Then put the input field and custom content into
 * `<nb-form-field>` and add `nbPrefix` or `nbSuffix` directive to the custom content.
 * `nbPrefix` puts content before input and `nbSuffix` after.
 *
 * @stacked-example(Input with icon, form-field/form-field-input.component)
 * @stacked-example(Input with button, form-field/form-field-password.component)
 *
 * @styles
 *
 * input-border-style:
 * input-border-width:
 * input-outline-color:
 * input-outline-width:
 * input-placeholder-text-font-family:
 * input-text-font-family:
 * input-basic-text-color:
 * input-basic-placeholder-text-color:
 * input-basic-background-color:
 * input-basic-border-color:
 * input-basic-focus-background-color:
 * input-basic-focus-border-color:
 * input-basic-hover-background-color:
 * input-basic-hover-border-color:
 * input-basic-disabled-background-color:
 * input-basic-disabled-border-color:
 * input-basic-disabled-text-color:
 * input-basic-disabled-placeholder-text-color:
 * input-primary-text-color:
 * input-primary-placeholder-text-color:
 * input-primary-background-color:
 * input-primary-border-color:
 * input-primary-focus-background-color:
 * input-primary-focus-border-color:
 * input-primary-hover-background-color:
 * input-primary-hover-border-color:
 * input-primary-disabled-background-color:
 * input-primary-disabled-border-color:
 * input-primary-disabled-text-color:
 * input-primary-disabled-placeholder-text-color:
 * input-success-text-color:
 * input-success-placeholder-text-color:
 * input-success-background-color:
 * input-success-border-color:
 * input-success-focus-background-color:
 * input-success-focus-border-color:
 * input-success-hover-background-color:
 * input-success-hover-border-color:
 * input-success-disabled-background-color:
 * input-success-disabled-border-color:
 * input-success-disabled-text-color:
 * input-success-disabled-placeholder-text-color:
 * input-info-text-color:
 * input-info-placeholder-text-color:
 * input-info-background-color:
 * input-info-border-color:
 * input-info-focus-background-color:
 * input-info-focus-border-color:
 * input-info-hover-background-color:
 * input-info-hover-border-color:
 * input-info-disabled-background-color:
 * input-info-disabled-border-color:
 * input-info-disabled-text-color:
 * input-info-disabled-placeholder-text-color:
 * input-warning-text-color:
 * input-warning-placeholder-text-color:
 * input-warning-background-color:
 * input-warning-border-color:
 * input-warning-focus-background-color:
 * input-warning-focus-border-color:
 * input-warning-hover-background-color:
 * input-warning-hover-border-color:
 * input-warning-disabled-background-color:
 * input-warning-disabled-border-color:
 * input-warning-disabled-text-color:
 * input-warning-disabled-placeholder-text-color:
 * input-danger-text-color:
 * input-danger-placeholder-text-color:
 * input-danger-background-color:
 * input-danger-border-color:
 * input-danger-focus-background-color:
 * input-danger-focus-border-color:
 * input-danger-hover-background-color:
 * input-danger-hover-border-color:
 * input-danger-disabled-background-color:
 * input-danger-disabled-border-color:
 * input-danger-disabled-text-color:
 * input-danger-disabled-placeholder-text-color:
 * input-control-text-color:
 * input-control-placeholder-text-color:
 * input-control-background-color:
 * input-control-border-color:
 * input-control-focus-background-color:
 * input-control-focus-border-color:
 * input-control-hover-background-color:
 * input-control-hover-border-color:
 * input-control-disabled-background-color:
 * input-control-disabled-border-color:
 * input-control-disabled-text-color:
 * input-control-disabled-placeholder-text-color:
 * input-rectangle-border-radius:
 * input-semi-round-border-radius:
 * input-round-border-radius:
 * input-tiny-text-font-size:
 * input-tiny-text-font-weight:
 * input-tiny-text-line-height:
 * input-tiny-placeholder-text-font-size:
 * input-tiny-placeholder-text-font-weight:
 * input-tiny-placeholder-text-line-height:
 * input-tiny-padding:
 * input-tiny-max-width:
 * input-small-text-font-size:
 * input-small-text-font-weight:
 * input-small-text-line-height:
 * input-small-placeholder-text-font-size:
 * input-small-placeholder-text-font-weight:
 * input-small-placeholder-text-line-height:
 * input-small-padding:
 * input-small-max-width:
 * input-medium-text-font-size:
 * input-medium-text-font-weight:
 * input-medium-text-line-height:
 * input-medium-placeholder-text-font-size:
 * input-medium-placeholder-text-font-weight:
 * input-medium-placeholder-text-line-height:
 * input-medium-padding:
 * input-medium-max-width:
 * input-large-text-font-size:
 * input-large-text-font-weight:
 * input-large-text-line-height:
 * input-large-placeholder-text-font-size:
 * input-large-placeholder-text-font-weight:
 * input-large-placeholder-text-line-height:
 * input-large-padding:
 * input-large-max-width:
 * input-giant-text-font-size:
 * input-giant-text-font-weight:
 * input-giant-text-line-height:
 * input-giant-placeholder-text-font-size:
 * input-giant-placeholder-text-font-weight:
 * input-giant-placeholder-text-line-height:
 * input-giant-padding:
 * input-giant-max-width:
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbInputDirective implements DoCheck, OnChanges, OnInit, AfterViewInit, OnDestroy, NbFormFieldControl {
    protected elementRef: ElementRef<HTMLInputElement | HTMLTextAreaElement>;
    protected focusMonitor: NbFocusMonitor;
    protected renderer: Renderer2;
    protected zone: NgZone;
    protected destroy$: Subject<void>;
    /**
     * Field size modifications. Possible values: `small`, `medium` (default), `large`.
     */
    fieldSize: NbComponentSize;
    /**
     * Field status (adds specific styles):
     * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`
     */
    get status(): NbComponentStatus;
    set status(value: NbComponentStatus);
    protected _status: NbComponentStatus;
    /**
     * Field shapes modifications. Possible values: `rectangle` (default), `round`, `semi-round`.
     */
    shape: NbComponentShape;
    /**
     * If set element will fill container. `false` by default.
     */
    get fullWidth(): boolean;
    set fullWidth(value: boolean);
    private _fullWidth;
    static ngAcceptInputType_fullWidth: NbBooleanInput;
    constructor(elementRef: ElementRef<HTMLInputElement | HTMLTextAreaElement>, focusMonitor: NbFocusMonitor, renderer: Renderer2, zone: NgZone);
    ngDoCheck(): void;
    ngOnChanges({ status, fieldSize }: SimpleChanges): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    get tiny(): boolean;
    get small(): boolean;
    get medium(): boolean;
    get large(): boolean;
    get giant(): boolean;
    get primary(): boolean;
    get info(): boolean;
    get success(): boolean;
    get warning(): boolean;
    get danger(): boolean;
    get basic(): boolean;
    get control(): boolean;
    get rectangle(): boolean;
    get semiRound(): boolean;
    get round(): boolean;
    status$: BehaviorSubject<NbComponentStatus>;
    size$: BehaviorSubject<NbComponentSize>;
    focused$: BehaviorSubject<boolean>;
    disabled$: BehaviorSubject<boolean>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbInputDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbInputDirective, "input[nbInput],textarea[nbInput]", never, {
    "fieldSize": "fieldSize";
    "shape": "shape";
    "status": "status";
    "fullWidth": "fullWidth";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImlucHV0LmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3TUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFEQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cbmltcG9ydCB7IE9uRGVzdHJveSwgT25Jbml0LCBFbGVtZW50UmVmLCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMsIERvQ2hlY2ssIEFmdGVyVmlld0luaXQsIFJlbmRlcmVyMiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0LCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5iQm9vbGVhbklucHV0IH0gZnJvbSAnLi4vaGVscGVycyc7XG5pbXBvcnQgeyBOYkNvbXBvbmVudFNpemUgfSBmcm9tICcuLi9jb21wb25lbnQtc2l6ZSc7XG5pbXBvcnQgeyBOYkNvbXBvbmVudFNoYXBlIH0gZnJvbSAnLi4vY29tcG9uZW50LXNoYXBlJztcbmltcG9ydCB7IE5iQ29tcG9uZW50U3RhdHVzIH0gZnJvbSAnLi4vY29tcG9uZW50LXN0YXR1cyc7XG5pbXBvcnQgeyBOYkZvcm1GaWVsZENvbnRyb2wgfSBmcm9tICcuLi9mb3JtLWZpZWxkL2Zvcm0tZmllbGQtY29udHJvbCc7XG5pbXBvcnQgeyBOYkZvY3VzTW9uaXRvciB9IGZyb20gJy4uL2Nkay9hMTF5L2ExMXkubW9kdWxlJztcbi8qKlxuICogQmFzaWMgaW5wdXQgZGlyZWN0aXZlLlxuICpcbiAqIGBgYGh0bWxcbiAqIDxpbnB1dCBuYklucHV0PjwvaW5wdXQ+XG4gKiBgYGBcbiAqXG4gKiAjIyMgSW5zdGFsbGF0aW9uXG4gKlxuICogSW1wb3J0IGBOYklucHV0TW9kdWxlYCB0byB5b3VyIGZlYXR1cmUgbW9kdWxlLlxuICogYGBgdHNcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIGltcG9ydHM6IFtcbiAqICAgICAvLyAuLi5cbiAqICAgICBOYklucHV0TW9kdWxlLFxuICogICBdLFxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBQYWdlTW9kdWxlIHsgfVxuICogYGBgXG4gKiAjIyMgVXNhZ2VcbiAqXG4gKiBEZWZhdWx0IGlucHV0IHNpemUgaXMgYG1lZGl1bWA6XG4gKiBAc3RhY2tlZC1leGFtcGxlKFNob3djYXNlLCBpbnB1dC9pbnB1dC1zaG93Y2FzZS5jb21wb25lbnQpXG4gKlxuICogSW5wdXRzIGFyZSBhdmFpbGFibGUgaW4gbXVsdGlwbGUgY29sb3JzIHVzaW5nIGBzdGF0dXNgIHByb3BlcnR5OlxuICogQHN0YWNrZWQtZXhhbXBsZShJbnB1dCBDb2xvcnMsIGlucHV0L2lucHV0LWNvbG9ycy5jb21wb25lbnQpXG4gKlxuICogVGhlcmUgYXJlIHRocmVlIGlucHV0IHNpemVzOlxuICpcbiAqIEBzdGFja2VkLWV4YW1wbGUoSW5wdXQgU2l6ZXMsIGlucHV0L2lucHV0LXNpemVzLmNvbXBvbmVudClcbiAqXG4gKiBJbnB1dHMgYXZhaWxhYmxlIGluIGRpZmZlcmVudCBzaGFwZXMsIHdoaWNoIGNvdWxkIGJlIGNvbWJpbmVkIHdpdGggdGhlIG90aGVyIHByb3BlcnRpZXM6XG4gKiBAc3RhY2tlZC1leGFtcGxlKElucHV0IFNoYXBlcywgaW5wdXQvaW5wdXQtc2hhcGVzLmNvbXBvbmVudClcbiAqXG4gKiBgbmJJbnB1dGAgY291bGQgYmUgYXBwbGllZCB0byB0aGUgZm9sbG93aW5nIHNlbGVjdG9ycyAtIGBpbnB1dGAsIGB0ZXh0YXJlYWA6XG4gKiBAc3RhY2tlZC1leGFtcGxlKElucHV0IEVsZW1lbnRzLCBpbnB1dC9pbnB1dC10eXBlcy5jb21wb25lbnQpXG4gKlxuICogWW91IGNhbiBhZGQgYGZ1bGxXaWR0aGAgYXR0cmlidXRlIHRvIG1ha2UgZWxlbWVudCBmaWxsIGNvbnRhaW5lcjpcbiAqIEBzdGFja2VkLWV4YW1wbGUoRnVsbCB3aWR0aCBpbnB1dHMsIGlucHV0L2lucHV0LWZ1bGwtd2lkdGguY29tcG9uZW50KVxuICpcbiAqIE9yIHlvdSBjYW4gYmluZCBjb250cm9sIHdpdGggZm9ybSBjb250cm9scyBvciBuZ01vZGVsOlxuICogQHN0YWNrZWQtZXhhbXBsZShJbnB1dCBmb3JtIGJpbmRpbmcsIGlucHV0L2lucHV0LWZvcm0uY29tcG9uZW50KVxuICpcbiAqIFVzZSBgPG5iLWZvcm0tZmllbGQ+YCB0byBhZGQgY3VzdG9tIGNvbnRlbnQgdG8gdGhlIGlucHV0IGZpZWxkLlxuICogRmlyc3QgaW1wb3J0IGBOYkZvcm1GaWVsZE1vZHVsZWAuIFRoZW4gcHV0IHRoZSBpbnB1dCBmaWVsZCBhbmQgY3VzdG9tIGNvbnRlbnQgaW50b1xuICogYDxuYi1mb3JtLWZpZWxkPmAgYW5kIGFkZCBgbmJQcmVmaXhgIG9yIGBuYlN1ZmZpeGAgZGlyZWN0aXZlIHRvIHRoZSBjdXN0b20gY29udGVudC5cbiAqIGBuYlByZWZpeGAgcHV0cyBjb250ZW50IGJlZm9yZSBpbnB1dCBhbmQgYG5iU3VmZml4YCBhZnRlci5cbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKElucHV0IHdpdGggaWNvbiwgZm9ybS1maWVsZC9mb3JtLWZpZWxkLWlucHV0LmNvbXBvbmVudClcbiAqIEBzdGFja2VkLWV4YW1wbGUoSW5wdXQgd2l0aCBidXR0b24sIGZvcm0tZmllbGQvZm9ybS1maWVsZC1wYXNzd29yZC5jb21wb25lbnQpXG4gKlxuICogQHN0eWxlc1xuICpcbiAqIGlucHV0LWJvcmRlci1zdHlsZTpcbiAqIGlucHV0LWJvcmRlci13aWR0aDpcbiAqIGlucHV0LW91dGxpbmUtY29sb3I6XG4gKiBpbnB1dC1vdXRsaW5lLXdpZHRoOlxuICogaW5wdXQtcGxhY2Vob2xkZXItdGV4dC1mb250LWZhbWlseTpcbiAqIGlucHV0LXRleHQtZm9udC1mYW1pbHk6XG4gKiBpbnB1dC1iYXNpYy10ZXh0LWNvbG9yOlxuICogaW5wdXQtYmFzaWMtcGxhY2Vob2xkZXItdGV4dC1jb2xvcjpcbiAqIGlucHV0LWJhc2ljLWJhY2tncm91bmQtY29sb3I6XG4gKiBpbnB1dC1iYXNpYy1ib3JkZXItY29sb3I6XG4gKiBpbnB1dC1iYXNpYy1mb2N1cy1iYWNrZ3JvdW5kLWNvbG9yOlxuICogaW5wdXQtYmFzaWMtZm9jdXMtYm9yZGVyLWNvbG9yOlxuICogaW5wdXQtYmFzaWMtaG92ZXItYmFja2dyb3VuZC1jb2xvcjpcbiAqIGlucHV0LWJhc2ljLWhvdmVyLWJvcmRlci1jb2xvcjpcbiAqIGlucHV0LWJhc2ljLWRpc2FibGVkLWJhY2tncm91bmQtY29sb3I6XG4gKiBpbnB1dC1iYXNpYy1kaXNhYmxlZC1ib3JkZXItY29sb3I6XG4gKiBpbnB1dC1iYXNpYy1kaXNhYmxlZC10ZXh0LWNvbG9yOlxuICogaW5wdXQtYmFzaWMtZGlzYWJsZWQtcGxhY2Vob2xkZXItdGV4dC1jb2xvcjpcbiAqIGlucHV0LXByaW1hcnktdGV4dC1jb2xvcjpcbiAqIGlucHV0LXByaW1hcnktcGxhY2Vob2xkZXItdGV4dC1jb2xvcjpcbiAqIGlucHV0LXByaW1hcnktYmFja2dyb3VuZC1jb2xvcjpcbiAqIGlucHV0LXByaW1hcnktYm9yZGVyLWNvbG9yOlxuICogaW5wdXQtcHJpbWFyeS1mb2N1cy1iYWNrZ3JvdW5kLWNvbG9yOlxuICogaW5wdXQtcHJpbWFyeS1mb2N1cy1ib3JkZXItY29sb3I6XG4gKiBpbnB1dC1wcmltYXJ5LWhvdmVyLWJhY2tncm91bmQtY29sb3I6XG4gKiBpbnB1dC1wcmltYXJ5LWhvdmVyLWJvcmRlci1jb2xvcjpcbiAqIGlucHV0LXByaW1hcnktZGlzYWJsZWQtYmFja2dyb3VuZC1jb2xvcjpcbiAqIGlucHV0LXByaW1hcnktZGlzYWJsZWQtYm9yZGVyLWNvbG9yOlxuICogaW5wdXQtcHJpbWFyeS1kaXNhYmxlZC10ZXh0LWNvbG9yOlxuICogaW5wdXQtcHJpbWFyeS1kaXNhYmxlZC1wbGFjZWhvbGRlci10ZXh0LWNvbG9yOlxuICogaW5wdXQtc3VjY2Vzcy10ZXh0LWNvbG9yOlxuICogaW5wdXQtc3VjY2Vzcy1wbGFjZWhvbGRlci10ZXh0LWNvbG9yOlxuICogaW5wdXQtc3VjY2Vzcy1iYWNrZ3JvdW5kLWNvbG9yOlxuICogaW5wdXQtc3VjY2Vzcy1ib3JkZXItY29sb3I6XG4gKiBpbnB1dC1zdWNjZXNzLWZvY3VzLWJhY2tncm91bmQtY29sb3I6XG4gKiBpbnB1dC1zdWNjZXNzLWZvY3VzLWJvcmRlci1jb2xvcjpcbiAqIGlucHV0LXN1Y2Nlc3MtaG92ZXItYmFja2dyb3VuZC1jb2xvcjpcbiAqIGlucHV0LXN1Y2Nlc3MtaG92ZXItYm9yZGVyLWNvbG9yOlxuICogaW5wdXQtc3VjY2Vzcy1kaXNhYmxlZC1iYWNrZ3JvdW5kLWNvbG9yOlxuICogaW5wdXQtc3VjY2Vzcy1kaXNhYmxlZC1ib3JkZXItY29sb3I6XG4gKiBpbnB1dC1zdWNjZXNzLWRpc2FibGVkLXRleHQtY29sb3I6XG4gKiBpbnB1dC1zdWNjZXNzLWRpc2FibGVkLXBsYWNlaG9sZGVyLXRleHQtY29sb3I6XG4gKiBpbnB1dC1pbmZvLXRleHQtY29sb3I6XG4gKiBpbnB1dC1pbmZvLXBsYWNlaG9sZGVyLXRleHQtY29sb3I6XG4gKiBpbnB1dC1pbmZvLWJhY2tncm91bmQtY29sb3I6XG4gKiBpbnB1dC1pbmZvLWJvcmRlci1jb2xvcjpcbiAqIGlucHV0LWluZm8tZm9jdXMtYmFja2dyb3VuZC1jb2xvcjpcbiAqIGlucHV0LWluZm8tZm9jdXMtYm9yZGVyLWNvbG9yOlxuICogaW5wdXQtaW5mby1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogaW5wdXQtaW5mby1ob3Zlci1ib3JkZXItY29sb3I6XG4gKiBpbnB1dC1pbmZvLWRpc2FibGVkLWJhY2tncm91bmQtY29sb3I6XG4gKiBpbnB1dC1pbmZvLWRpc2FibGVkLWJvcmRlci1jb2xvcjpcbiAqIGlucHV0LWluZm8tZGlzYWJsZWQtdGV4dC1jb2xvcjpcbiAqIGlucHV0LWluZm8tZGlzYWJsZWQtcGxhY2Vob2xkZXItdGV4dC1jb2xvcjpcbiAqIGlucHV0LXdhcm5pbmctdGV4dC1jb2xvcjpcbiAqIGlucHV0LXdhcm5pbmctcGxhY2Vob2xkZXItdGV4dC1jb2xvcjpcbiAqIGlucHV0LXdhcm5pbmctYmFja2dyb3VuZC1jb2xvcjpcbiAqIGlucHV0LXdhcm5pbmctYm9yZGVyLWNvbG9yOlxuICogaW5wdXQtd2FybmluZy1mb2N1cy1iYWNrZ3JvdW5kLWNvbG9yOlxuICogaW5wdXQtd2FybmluZy1mb2N1cy1ib3JkZXItY29sb3I6XG4gKiBpbnB1dC13YXJuaW5nLWhvdmVyLWJhY2tncm91bmQtY29sb3I6XG4gKiBpbnB1dC13YXJuaW5nLWhvdmVyLWJvcmRlci1jb2xvcjpcbiAqIGlucHV0LXdhcm5pbmctZGlzYWJsZWQtYmFja2dyb3VuZC1jb2xvcjpcbiAqIGlucHV0LXdhcm5pbmctZGlzYWJsZWQtYm9yZGVyLWNvbG9yOlxuICogaW5wdXQtd2FybmluZy1kaXNhYmxlZC10ZXh0LWNvbG9yOlxuICogaW5wdXQtd2FybmluZy1kaXNhYmxlZC1wbGFjZWhvbGRlci10ZXh0LWNvbG9yOlxuICogaW5wdXQtZGFuZ2VyLXRleHQtY29sb3I6XG4gKiBpbnB1dC1kYW5nZXItcGxhY2Vob2xkZXItdGV4dC1jb2xvcjpcbiAqIGlucHV0LWRhbmdlci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogaW5wdXQtZGFuZ2VyLWJvcmRlci1jb2xvcjpcbiAqIGlucHV0LWRhbmdlci1mb2N1cy1iYWNrZ3JvdW5kLWNvbG9yOlxuICogaW5wdXQtZGFuZ2VyLWZvY3VzLWJvcmRlci1jb2xvcjpcbiAqIGlucHV0LWRhbmdlci1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogaW5wdXQtZGFuZ2VyLWhvdmVyLWJvcmRlci1jb2xvcjpcbiAqIGlucHV0LWRhbmdlci1kaXNhYmxlZC1iYWNrZ3JvdW5kLWNvbG9yOlxuICogaW5wdXQtZGFuZ2VyLWRpc2FibGVkLWJvcmRlci1jb2xvcjpcbiAqIGlucHV0LWRhbmdlci1kaXNhYmxlZC10ZXh0LWNvbG9yOlxuICogaW5wdXQtZGFuZ2VyLWRpc2FibGVkLXBsYWNlaG9sZGVyLXRleHQtY29sb3I6XG4gKiBpbnB1dC1jb250cm9sLXRleHQtY29sb3I6XG4gKiBpbnB1dC1jb250cm9sLXBsYWNlaG9sZGVyLXRleHQtY29sb3I6XG4gKiBpbnB1dC1jb250cm9sLWJhY2tncm91bmQtY29sb3I6XG4gKiBpbnB1dC1jb250cm9sLWJvcmRlci1jb2xvcjpcbiAqIGlucHV0LWNvbnRyb2wtZm9jdXMtYmFja2dyb3VuZC1jb2xvcjpcbiAqIGlucHV0LWNvbnRyb2wtZm9jdXMtYm9yZGVyLWNvbG9yOlxuICogaW5wdXQtY29udHJvbC1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogaW5wdXQtY29udHJvbC1ob3Zlci1ib3JkZXItY29sb3I6XG4gKiBpbnB1dC1jb250cm9sLWRpc2FibGVkLWJhY2tncm91bmQtY29sb3I6XG4gKiBpbnB1dC1jb250cm9sLWRpc2FibGVkLWJvcmRlci1jb2xvcjpcbiAqIGlucHV0LWNvbnRyb2wtZGlzYWJsZWQtdGV4dC1jb2xvcjpcbiAqIGlucHV0LWNvbnRyb2wtZGlzYWJsZWQtcGxhY2Vob2xkZXItdGV4dC1jb2xvcjpcbiAqIGlucHV0LXJlY3RhbmdsZS1ib3JkZXItcmFkaXVzOlxuICogaW5wdXQtc2VtaS1yb3VuZC1ib3JkZXItcmFkaXVzOlxuICogaW5wdXQtcm91bmQtYm9yZGVyLXJhZGl1czpcbiAqIGlucHV0LXRpbnktdGV4dC1mb250LXNpemU6XG4gKiBpbnB1dC10aW55LXRleHQtZm9udC13ZWlnaHQ6XG4gKiBpbnB1dC10aW55LXRleHQtbGluZS1oZWlnaHQ6XG4gKiBpbnB1dC10aW55LXBsYWNlaG9sZGVyLXRleHQtZm9udC1zaXplOlxuICogaW5wdXQtdGlueS1wbGFjZWhvbGRlci10ZXh0LWZvbnQtd2VpZ2h0OlxuICogaW5wdXQtdGlueS1wbGFjZWhvbGRlci10ZXh0LWxpbmUtaGVpZ2h0OlxuICogaW5wdXQtdGlueS1wYWRkaW5nOlxuICogaW5wdXQtdGlueS1tYXgtd2lkdGg6XG4gKiBpbnB1dC1zbWFsbC10ZXh0LWZvbnQtc2l6ZTpcbiAqIGlucHV0LXNtYWxsLXRleHQtZm9udC13ZWlnaHQ6XG4gKiBpbnB1dC1zbWFsbC10ZXh0LWxpbmUtaGVpZ2h0OlxuICogaW5wdXQtc21hbGwtcGxhY2Vob2xkZXItdGV4dC1mb250LXNpemU6XG4gKiBpbnB1dC1zbWFsbC1wbGFjZWhvbGRlci10ZXh0LWZvbnQtd2VpZ2h0OlxuICogaW5wdXQtc21hbGwtcGxhY2Vob2xkZXItdGV4dC1saW5lLWhlaWdodDpcbiAqIGlucHV0LXNtYWxsLXBhZGRpbmc6XG4gKiBpbnB1dC1zbWFsbC1tYXgtd2lkdGg6XG4gKiBpbnB1dC1tZWRpdW0tdGV4dC1mb250LXNpemU6XG4gKiBpbnB1dC1tZWRpdW0tdGV4dC1mb250LXdlaWdodDpcbiAqIGlucHV0LW1lZGl1bS10ZXh0LWxpbmUtaGVpZ2h0OlxuICogaW5wdXQtbWVkaXVtLXBsYWNlaG9sZGVyLXRleHQtZm9udC1zaXplOlxuICogaW5wdXQtbWVkaXVtLXBsYWNlaG9sZGVyLXRleHQtZm9udC13ZWlnaHQ6XG4gKiBpbnB1dC1tZWRpdW0tcGxhY2Vob2xkZXItdGV4dC1saW5lLWhlaWdodDpcbiAqIGlucHV0LW1lZGl1bS1wYWRkaW5nOlxuICogaW5wdXQtbWVkaXVtLW1heC13aWR0aDpcbiAqIGlucHV0LWxhcmdlLXRleHQtZm9udC1zaXplOlxuICogaW5wdXQtbGFyZ2UtdGV4dC1mb250LXdlaWdodDpcbiAqIGlucHV0LWxhcmdlLXRleHQtbGluZS1oZWlnaHQ6XG4gKiBpbnB1dC1sYXJnZS1wbGFjZWhvbGRlci10ZXh0LWZvbnQtc2l6ZTpcbiAqIGlucHV0LWxhcmdlLXBsYWNlaG9sZGVyLXRleHQtZm9udC13ZWlnaHQ6XG4gKiBpbnB1dC1sYXJnZS1wbGFjZWhvbGRlci10ZXh0LWxpbmUtaGVpZ2h0OlxuICogaW5wdXQtbGFyZ2UtcGFkZGluZzpcbiAqIGlucHV0LWxhcmdlLW1heC13aWR0aDpcbiAqIGlucHV0LWdpYW50LXRleHQtZm9udC1zaXplOlxuICogaW5wdXQtZ2lhbnQtdGV4dC1mb250LXdlaWdodDpcbiAqIGlucHV0LWdpYW50LXRleHQtbGluZS1oZWlnaHQ6XG4gKiBpbnB1dC1naWFudC1wbGFjZWhvbGRlci10ZXh0LWZvbnQtc2l6ZTpcbiAqIGlucHV0LWdpYW50LXBsYWNlaG9sZGVyLXRleHQtZm9udC13ZWlnaHQ6XG4gKiBpbnB1dC1naWFudC1wbGFjZWhvbGRlci10ZXh0LWxpbmUtaGVpZ2h0OlxuICogaW5wdXQtZ2lhbnQtcGFkZGluZzpcbiAqIGlucHV0LWdpYW50LW1heC13aWR0aDpcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJJbnB1dERpcmVjdGl2ZSBpbXBsZW1lbnRzIERvQ2hlY2ssIE9uQ2hhbmdlcywgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIE5iRm9ybUZpZWxkQ29udHJvbCB7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQ+O1xuICAgIHByb3RlY3RlZCBmb2N1c01vbml0b3I6IE5iRm9jdXNNb25pdG9yO1xuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIHByb3RlY3RlZCB6b25lOiBOZ1pvbmU7XG4gICAgcHJvdGVjdGVkIGRlc3Ryb3kkOiBTdWJqZWN0PHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIEZpZWxkIHNpemUgbW9kaWZpY2F0aW9ucy4gUG9zc2libGUgdmFsdWVzOiBgc21hbGxgLCBgbWVkaXVtYCAoZGVmYXVsdCksIGBsYXJnZWAuXG4gICAgICovXG4gICAgZmllbGRTaXplOiBOYkNvbXBvbmVudFNpemU7XG4gICAgLyoqXG4gICAgICogRmllbGQgc3RhdHVzIChhZGRzIHNwZWNpZmljIHN0eWxlcyk6XG4gICAgICogYGJhc2ljYCwgYHByaW1hcnlgLCBgaW5mb2AsIGBzdWNjZXNzYCwgYHdhcm5pbmdgLCBgZGFuZ2VyYCwgYGNvbnRyb2xgXG4gICAgICovXG4gICAgZ2V0IHN0YXR1cygpOiBOYkNvbXBvbmVudFN0YXR1cztcbiAgICBzZXQgc3RhdHVzKHZhbHVlOiBOYkNvbXBvbmVudFN0YXR1cyk7XG4gICAgcHJvdGVjdGVkIF9zdGF0dXM6IE5iQ29tcG9uZW50U3RhdHVzO1xuICAgIC8qKlxuICAgICAqIEZpZWxkIHNoYXBlcyBtb2RpZmljYXRpb25zLiBQb3NzaWJsZSB2YWx1ZXM6IGByZWN0YW5nbGVgIChkZWZhdWx0KSwgYHJvdW5kYCwgYHNlbWktcm91bmRgLlxuICAgICAqL1xuICAgIHNoYXBlOiBOYkNvbXBvbmVudFNoYXBlO1xuICAgIC8qKlxuICAgICAqIElmIHNldCBlbGVtZW50IHdpbGwgZmlsbCBjb250YWluZXIuIGBmYWxzZWAgYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICBnZXQgZnVsbFdpZHRoKCk6IGJvb2xlYW47XG4gICAgc2V0IGZ1bGxXaWR0aCh2YWx1ZTogYm9vbGVhbik7XG4gICAgcHJpdmF0ZSBfZnVsbFdpZHRoO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9mdWxsV2lkdGg6IE5iQm9vbGVhbklucHV0O1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQ+LCBmb2N1c01vbml0b3I6IE5iRm9jdXNNb25pdG9yLCByZW5kZXJlcjogUmVuZGVyZXIyLCB6b25lOiBOZ1pvbmUpO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKHsgc3RhdHVzLCBmaWVsZFNpemUgfTogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGdldCB0aW55KCk6IGJvb2xlYW47XG4gICAgZ2V0IHNtYWxsKCk6IGJvb2xlYW47XG4gICAgZ2V0IG1lZGl1bSgpOiBib29sZWFuO1xuICAgIGdldCBsYXJnZSgpOiBib29sZWFuO1xuICAgIGdldCBnaWFudCgpOiBib29sZWFuO1xuICAgIGdldCBwcmltYXJ5KCk6IGJvb2xlYW47XG4gICAgZ2V0IGluZm8oKTogYm9vbGVhbjtcbiAgICBnZXQgc3VjY2VzcygpOiBib29sZWFuO1xuICAgIGdldCB3YXJuaW5nKCk6IGJvb2xlYW47XG4gICAgZ2V0IGRhbmdlcigpOiBib29sZWFuO1xuICAgIGdldCBiYXNpYygpOiBib29sZWFuO1xuICAgIGdldCBjb250cm9sKCk6IGJvb2xlYW47XG4gICAgZ2V0IHJlY3RhbmdsZSgpOiBib29sZWFuO1xuICAgIGdldCBzZW1pUm91bmQoKTogYm9vbGVhbjtcbiAgICBnZXQgcm91bmQoKTogYm9vbGVhbjtcbiAgICBzdGF0dXMkOiBCZWhhdmlvclN1YmplY3Q8TmJDb21wb25lbnRTdGF0dXM+O1xuICAgIHNpemUkOiBCZWhhdmlvclN1YmplY3Q8TmJDb21wb25lbnRTaXplPjtcbiAgICBmb2N1c2VkJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+O1xuICAgIGRpc2FibGVkJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+O1xufVxuIl19