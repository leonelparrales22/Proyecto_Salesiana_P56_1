import { AfterViewInit, ElementRef, OnChanges, OnDestroy, OnInit, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { NbComponentStatus } from '../component-status';
import { NbAdjustment, NbPosition, NbPositionValues } from '../cdk/overlay/overlay-position';
import { NbTrigger } from '../cdk/overlay/overlay-trigger';
import { NbDynamicOverlay } from '../cdk/overlay/dynamic/dynamic-overlay';
import { NbDynamicOverlayHandler } from '../cdk/overlay/dynamic/dynamic-overlay-handler';
import { NbTooltipComponent } from './tooltip.component';
import { NbIconConfig } from '../icon/icon.component';
/**
 *
 * Tooltip directive for small text/icon hints.
 *
 * ### Installation
 *
 * Import `NbTooltipModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbTooltipModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * @stacked-example(Showcase, tooltip/tooltip-showcase.component)
 *
 * Tooltip can accept a hint text and/or an icon:
 * @stacked-example(With Icon, tooltip/tooltip-with-icon.component)
 *
 * Same way as Popover, tooltip can accept placement position with `nbTooltipPlacement` property:
 * @stacked-example(Placements, tooltip/tooltip-placements.component)
 *
 * It is also possible to specify tooltip color using `nbTooltipStatus` property:
 * @stacked-example(Colored Tooltips, tooltip/tooltip-colors.component)
 *
 * Tooltip has a number of triggers which provides an ability to show and hide the component in different ways:
 *
 * - Click mode shows the component when a user clicks on the host element and hides when the user clicks
 * somewhere on the document outside the component.
 * - Hint provides capability to show the component when the user hovers over the host element
 * and hide when the user hovers out of the host.
 * - Hover works like hint mode with one exception - when the user moves mouse from host element to
 * the container element the component remains open, so that it is possible to interact with it content.
 * - Focus mode is applied when user focuses the element.
 * - Noop mode - the component won't react to the user interaction.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbTooltipDirective implements OnInit, OnChanges, AfterViewInit, OnDestroy {
    protected hostRef: ElementRef;
    protected dynamicOverlayHandler: NbDynamicOverlayHandler;
    protected destroy$: Subject<void>;
    protected tooltipComponent: typeof NbTooltipComponent;
    protected dynamicOverlay: NbDynamicOverlay;
    protected offset: number;
    context: Object;
    /**
     * Tooltip message
     */
    content: string;
    /**
     * Position will be calculated relatively host element based on the position.
     * Can be top, right, bottom, left, start or end.
     */
    position: NbPosition;
    static ngAcceptInputType_position: NbPositionValues;
    /**
     * Container position will change automatically based on this strategy if container can't fit view port.
     * Set this property to `noop` value if you want to disable automatic adjustment.
     * Available values: `clockwise` (default), `counterclockwise`, `vertical`, `horizontal`, `noop`.
     */
    get adjustment(): NbAdjustment;
    set adjustment(value: NbAdjustment);
    protected _adjustment: NbAdjustment;
    tooltipClass: string;
    /**
     * Accepts icon name or icon config object
     * @param {string | NbIconConfig} icon name or config object
     */
    set icon(icon: string | NbIconConfig);
    /**
     *
     * @param {string} status
     */
    set status(status: NbComponentStatus);
    /**
     * Describes when the container will be shown.
     * Available options: `click`, `hover`, `hint`, `focus` and `noop`
     * */
    trigger: NbTrigger;
    nbTooltipShowStateChange: EventEmitter<{
        isShown: boolean;
    }>;
    get isShown(): boolean;
    constructor(hostRef: ElementRef, dynamicOverlayHandler: NbDynamicOverlayHandler);
    ngOnInit(): void;
    ngOnChanges(): void;
    ngAfterViewInit(): void;
    rebuild(): void;
    show(): void;
    hide(): void;
    toggle(): void;
    ngOnDestroy(): void;
    protected configureDynamicOverlay(): NbDynamicOverlayHandler;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTooltipDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbTooltipDirective, "[nbTooltip]", ["nbTooltip"], {
    "position": "nbTooltipPlacement";
    "tooltipClass": "nbTooltipClass";
    "trigger": "nbTooltipTrigger";
    "adjustment": "nbTooltipAdjustment";
    "icon": "nbTooltipIcon";
    "status": "nbTooltipStatus";
    "content": "nbTooltip";
}, {
    "nbTooltipShowStateChange": "nbTooltipShowStateChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidG9vbHRpcC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpREE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYkNvbXBvbmVudFN0YXR1cyB9IGZyb20gJy4uL2NvbXBvbmVudC1zdGF0dXMnO1xuaW1wb3J0IHsgTmJBZGp1c3RtZW50LCBOYlBvc2l0aW9uLCBOYlBvc2l0aW9uVmFsdWVzIH0gZnJvbSAnLi4vY2RrL292ZXJsYXkvb3ZlcmxheS1wb3NpdGlvbic7XG5pbXBvcnQgeyBOYlRyaWdnZXIgfSBmcm9tICcuLi9jZGsvb3ZlcmxheS9vdmVybGF5LXRyaWdnZXInO1xuaW1wb3J0IHsgTmJEeW5hbWljT3ZlcmxheSB9IGZyb20gJy4uL2Nkay9vdmVybGF5L2R5bmFtaWMvZHluYW1pYy1vdmVybGF5JztcbmltcG9ydCB7IE5iRHluYW1pY092ZXJsYXlIYW5kbGVyIH0gZnJvbSAnLi4vY2RrL292ZXJsYXkvZHluYW1pYy9keW5hbWljLW92ZXJsYXktaGFuZGxlcic7XG5pbXBvcnQgeyBOYlRvb2x0aXBDb21wb25lbnQgfSBmcm9tICcuL3Rvb2x0aXAuY29tcG9uZW50JztcbmltcG9ydCB7IE5iSWNvbkNvbmZpZyB9IGZyb20gJy4uL2ljb24vaWNvbi5jb21wb25lbnQnO1xuLyoqXG4gKlxuICogVG9vbHRpcCBkaXJlY3RpdmUgZm9yIHNtYWxsIHRleHQvaWNvbiBoaW50cy5cbiAqXG4gKiAjIyMgSW5zdGFsbGF0aW9uXG4gKlxuICogSW1wb3J0IGBOYlRvb2x0aXBNb2R1bGVgIHRvIHlvdXIgZmVhdHVyZSBtb2R1bGUuXG4gKiBgYGB0c1xuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIC8vIC4uLlxuICogICAgIE5iVG9vbHRpcE1vZHVsZSxcbiAqICAgXSxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgUGFnZU1vZHVsZSB7IH1cbiAqIGBgYFxuICogIyMjIFVzYWdlXG4gKlxuICogQHN0YWNrZWQtZXhhbXBsZShTaG93Y2FzZSwgdG9vbHRpcC90b29sdGlwLXNob3djYXNlLmNvbXBvbmVudClcbiAqXG4gKiBUb29sdGlwIGNhbiBhY2NlcHQgYSBoaW50IHRleHQgYW5kL29yIGFuIGljb246XG4gKiBAc3RhY2tlZC1leGFtcGxlKFdpdGggSWNvbiwgdG9vbHRpcC90b29sdGlwLXdpdGgtaWNvbi5jb21wb25lbnQpXG4gKlxuICogU2FtZSB3YXkgYXMgUG9wb3ZlciwgdG9vbHRpcCBjYW4gYWNjZXB0IHBsYWNlbWVudCBwb3NpdGlvbiB3aXRoIGBuYlRvb2x0aXBQbGFjZW1lbnRgIHByb3BlcnR5OlxuICogQHN0YWNrZWQtZXhhbXBsZShQbGFjZW1lbnRzLCB0b29sdGlwL3Rvb2x0aXAtcGxhY2VtZW50cy5jb21wb25lbnQpXG4gKlxuICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBzcGVjaWZ5IHRvb2x0aXAgY29sb3IgdXNpbmcgYG5iVG9vbHRpcFN0YXR1c2AgcHJvcGVydHk6XG4gKiBAc3RhY2tlZC1leGFtcGxlKENvbG9yZWQgVG9vbHRpcHMsIHRvb2x0aXAvdG9vbHRpcC1jb2xvcnMuY29tcG9uZW50KVxuICpcbiAqIFRvb2x0aXAgaGFzIGEgbnVtYmVyIG9mIHRyaWdnZXJzIHdoaWNoIHByb3ZpZGVzIGFuIGFiaWxpdHkgdG8gc2hvdyBhbmQgaGlkZSB0aGUgY29tcG9uZW50IGluIGRpZmZlcmVudCB3YXlzOlxuICpcbiAqIC0gQ2xpY2sgbW9kZSBzaG93cyB0aGUgY29tcG9uZW50IHdoZW4gYSB1c2VyIGNsaWNrcyBvbiB0aGUgaG9zdCBlbGVtZW50IGFuZCBoaWRlcyB3aGVuIHRoZSB1c2VyIGNsaWNrc1xuICogc29tZXdoZXJlIG9uIHRoZSBkb2N1bWVudCBvdXRzaWRlIHRoZSBjb21wb25lbnQuXG4gKiAtIEhpbnQgcHJvdmlkZXMgY2FwYWJpbGl0eSB0byBzaG93IHRoZSBjb21wb25lbnQgd2hlbiB0aGUgdXNlciBob3ZlcnMgb3ZlciB0aGUgaG9zdCBlbGVtZW50XG4gKiBhbmQgaGlkZSB3aGVuIHRoZSB1c2VyIGhvdmVycyBvdXQgb2YgdGhlIGhvc3QuXG4gKiAtIEhvdmVyIHdvcmtzIGxpa2UgaGludCBtb2RlIHdpdGggb25lIGV4Y2VwdGlvbiAtIHdoZW4gdGhlIHVzZXIgbW92ZXMgbW91c2UgZnJvbSBob3N0IGVsZW1lbnQgdG9cbiAqIHRoZSBjb250YWluZXIgZWxlbWVudCB0aGUgY29tcG9uZW50IHJlbWFpbnMgb3Blbiwgc28gdGhhdCBpdCBpcyBwb3NzaWJsZSB0byBpbnRlcmFjdCB3aXRoIGl0IGNvbnRlbnQuXG4gKiAtIEZvY3VzIG1vZGUgaXMgYXBwbGllZCB3aGVuIHVzZXIgZm9jdXNlcyB0aGUgZWxlbWVudC5cbiAqIC0gTm9vcCBtb2RlIC0gdGhlIGNvbXBvbmVudCB3b24ndCByZWFjdCB0byB0aGUgdXNlciBpbnRlcmFjdGlvbi5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJUb29sdGlwRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIGhvc3RSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIGR5bmFtaWNPdmVybGF5SGFuZGxlcjogTmJEeW5hbWljT3ZlcmxheUhhbmRsZXI7XG4gICAgcHJvdGVjdGVkIGRlc3Ryb3kkOiBTdWJqZWN0PHZvaWQ+O1xuICAgIHByb3RlY3RlZCB0b29sdGlwQ29tcG9uZW50OiB0eXBlb2YgTmJUb29sdGlwQ29tcG9uZW50O1xuICAgIHByb3RlY3RlZCBkeW5hbWljT3ZlcmxheTogTmJEeW5hbWljT3ZlcmxheTtcbiAgICBwcm90ZWN0ZWQgb2Zmc2V0OiBudW1iZXI7XG4gICAgY29udGV4dDogT2JqZWN0O1xuICAgIC8qKlxuICAgICAqIFRvb2x0aXAgbWVzc2FnZVxuICAgICAqL1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBQb3NpdGlvbiB3aWxsIGJlIGNhbGN1bGF0ZWQgcmVsYXRpdmVseSBob3N0IGVsZW1lbnQgYmFzZWQgb24gdGhlIHBvc2l0aW9uLlxuICAgICAqIENhbiBiZSB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIHN0YXJ0IG9yIGVuZC5cbiAgICAgKi9cbiAgICBwb3NpdGlvbjogTmJQb3NpdGlvbjtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfcG9zaXRpb246IE5iUG9zaXRpb25WYWx1ZXM7XG4gICAgLyoqXG4gICAgICogQ29udGFpbmVyIHBvc2l0aW9uIHdpbGwgY2hhbmdlIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gdGhpcyBzdHJhdGVneSBpZiBjb250YWluZXIgY2FuJ3QgZml0IHZpZXcgcG9ydC5cbiAgICAgKiBTZXQgdGhpcyBwcm9wZXJ0eSB0byBgbm9vcGAgdmFsdWUgaWYgeW91IHdhbnQgdG8gZGlzYWJsZSBhdXRvbWF0aWMgYWRqdXN0bWVudC5cbiAgICAgKiBBdmFpbGFibGUgdmFsdWVzOiBgY2xvY2t3aXNlYCAoZGVmYXVsdCksIGBjb3VudGVyY2xvY2t3aXNlYCwgYHZlcnRpY2FsYCwgYGhvcml6b250YWxgLCBgbm9vcGAuXG4gICAgICovXG4gICAgZ2V0IGFkanVzdG1lbnQoKTogTmJBZGp1c3RtZW50O1xuICAgIHNldCBhZGp1c3RtZW50KHZhbHVlOiBOYkFkanVzdG1lbnQpO1xuICAgIHByb3RlY3RlZCBfYWRqdXN0bWVudDogTmJBZGp1c3RtZW50O1xuICAgIHRvb2x0aXBDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFjY2VwdHMgaWNvbiBuYW1lIG9yIGljb24gY29uZmlnIG9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgTmJJY29uQ29uZmlnfSBpY29uIG5hbWUgb3IgY29uZmlnIG9iamVjdFxuICAgICAqL1xuICAgIHNldCBpY29uKGljb246IHN0cmluZyB8IE5iSWNvbkNvbmZpZyk7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzXG4gICAgICovXG4gICAgc2V0IHN0YXR1cyhzdGF0dXM6IE5iQ29tcG9uZW50U3RhdHVzKTtcbiAgICAvKipcbiAgICAgKiBEZXNjcmliZXMgd2hlbiB0aGUgY29udGFpbmVyIHdpbGwgYmUgc2hvd24uXG4gICAgICogQXZhaWxhYmxlIG9wdGlvbnM6IGBjbGlja2AsIGBob3ZlcmAsIGBoaW50YCwgYGZvY3VzYCBhbmQgYG5vb3BgXG4gICAgICogKi9cbiAgICB0cmlnZ2VyOiBOYlRyaWdnZXI7XG4gICAgbmJUb29sdGlwU2hvd1N0YXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBpc1Nob3duOiBib29sZWFuO1xuICAgIH0+O1xuICAgIGdldCBpc1Nob3duKCk6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoaG9zdFJlZjogRWxlbWVudFJlZiwgZHluYW1pY092ZXJsYXlIYW5kbGVyOiBOYkR5bmFtaWNPdmVybGF5SGFuZGxlcik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIHJlYnVpbGQoKTogdm9pZDtcbiAgICBzaG93KCk6IHZvaWQ7XG4gICAgaGlkZSgpOiB2b2lkO1xuICAgIHRvZ2dsZSgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGNvbmZpZ3VyZUR5bmFtaWNPdmVybGF5KCk6IE5iRHluYW1pY092ZXJsYXlIYW5kbGVyO1xufVxuIl19