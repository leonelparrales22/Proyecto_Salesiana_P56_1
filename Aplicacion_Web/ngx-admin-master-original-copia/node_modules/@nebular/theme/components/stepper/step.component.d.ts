import { TemplateRef } from '@angular/core';
import { NbStepperComponent } from './stepper.component';
import { NbBooleanInput } from '../helpers';
/**
 * Component intended to be used within  the `<nb-stepper>` component.
 * Container for a step
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbStepComponent {
    protected stepper: NbStepperComponent;
    /**
     * Step content
     *
     * @type {TemplateRef}
     */
    content: TemplateRef<any>;
    /**
     * Top level abstract control of the step
     */
    stepControl?: {
        valid: boolean | null;
        reset: () => void;
    };
    /**
     * Step label
     *
     * @type {string|TemplateRef<any>}
     */
    label: string | TemplateRef<any>;
    /**
     * Whether step will be displayed in wizard
     *
     * @type {boolean}
     */
    get hidden(): boolean;
    set hidden(value: boolean);
    protected _hidden: boolean;
    static ngAcceptInputType_hidden: NbBooleanInput;
    /**
     * Check that label is a TemplateRef.
     *
     * @return boolean
     * */
    get isLabelTemplate(): boolean;
    /**
     * Whether step is marked as completed.
     *
     * @type {boolean}
     */
    get completed(): boolean;
    set completed(value: boolean);
    protected _completed: boolean;
    static ngAcceptInputType_completed: NbBooleanInput;
    protected get isCompleted(): boolean;
    interacted: boolean;
    constructor(stepper: any);
    /**
     * Mark step as selected
     * */
    select(): void;
    /**
     * Reset step and stepControl state
     * */
    reset(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbStepComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbStepComponent, "nb-step", never, {
    "hidden": "hidden";
    "completed": "completed";
    "stepControl": "stepControl";
    "label": "label";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3RlcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5iU3RlcHBlckNvbXBvbmVudCB9IGZyb20gJy4vc3RlcHBlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmJCb29sZWFuSW5wdXQgfSBmcm9tICcuLi9oZWxwZXJzJztcbi8qKlxuICogQ29tcG9uZW50IGludGVuZGVkIHRvIGJlIHVzZWQgd2l0aGluICB0aGUgYDxuYi1zdGVwcGVyPmAgY29tcG9uZW50LlxuICogQ29udGFpbmVyIGZvciBhIHN0ZXBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJTdGVwQ29tcG9uZW50IHtcbiAgICBwcm90ZWN0ZWQgc3RlcHBlcjogTmJTdGVwcGVyQ29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFN0ZXAgY29udGVudFxuICAgICAqXG4gICAgICogQHR5cGUge1RlbXBsYXRlUmVmfVxuICAgICAqL1xuICAgIGNvbnRlbnQ6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogVG9wIGxldmVsIGFic3RyYWN0IGNvbnRyb2wgb2YgdGhlIHN0ZXBcbiAgICAgKi9cbiAgICBzdGVwQ29udHJvbD86IHtcbiAgICAgICAgdmFsaWQ6IGJvb2xlYW4gfCBudWxsO1xuICAgICAgICByZXNldDogKCkgPT4gdm9pZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0ZXAgbGFiZWxcbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd8VGVtcGxhdGVSZWY8YW55Pn1cbiAgICAgKi9cbiAgICBsYWJlbDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHN0ZXAgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gd2l6YXJkXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgaGlkZGVuKCk6IGJvb2xlYW47XG4gICAgc2V0IGhpZGRlbih2YWx1ZTogYm9vbGVhbik7XG4gICAgcHJvdGVjdGVkIF9oaWRkZW46IGJvb2xlYW47XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX2hpZGRlbjogTmJCb29sZWFuSW5wdXQ7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhhdCBsYWJlbCBpcyBhIFRlbXBsYXRlUmVmLlxuICAgICAqXG4gICAgICogQHJldHVybiBib29sZWFuXG4gICAgICogKi9cbiAgICBnZXQgaXNMYWJlbFRlbXBsYXRlKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogV2hldGhlciBzdGVwIGlzIG1hcmtlZCBhcyBjb21wbGV0ZWQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgY29tcGxldGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGNvbXBsZXRlZCh2YWx1ZTogYm9vbGVhbik7XG4gICAgcHJvdGVjdGVkIF9jb21wbGV0ZWQ6IGJvb2xlYW47XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX2NvbXBsZXRlZDogTmJCb29sZWFuSW5wdXQ7XG4gICAgcHJvdGVjdGVkIGdldCBpc0NvbXBsZXRlZCgpOiBib29sZWFuO1xuICAgIGludGVyYWN0ZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3Ioc3RlcHBlcjogYW55KTtcbiAgICAvKipcbiAgICAgKiBNYXJrIHN0ZXAgYXMgc2VsZWN0ZWRcbiAgICAgKiAqL1xuICAgIHNlbGVjdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlc2V0IHN0ZXAgYW5kIHN0ZXBDb250cm9sIHN0YXRlXG4gICAgICogKi9cbiAgICByZXNldCgpOiB2b2lkO1xufVxuIl19