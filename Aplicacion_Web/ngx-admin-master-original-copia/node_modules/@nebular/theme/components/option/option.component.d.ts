import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, AfterViewInit, NgZone, Renderer2 } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { NbBooleanInput } from '../helpers';
import { NbFocusableOption } from '../cdk/a11y/focus-key-manager';
import { NbHighlightableOption } from '../cdk/a11y/descendant-key-manager';
import { NbSelectComponent } from '../select/select.component';
/**
 * NbOptionComponent
 *
 * @styles
 *
 * option-background-color:
 * option-text-color:
 * option-text-font-family:
 * option-hover-background-color:
 * option-hover-text-color:
 * option-active-background-color:
 * option-active-text-color:
 * option-focus-background-color:
 * option-focus-text-color:
 * option-selected-background-color:
 * option-selected-text-color:
 * option-selected-hover-background-color:
 * option-selected-hover-text-color:
 * option-selected-active-background-color:
 * option-selected-active-text-color:
 * option-selected-focus-background-color:
 * option-selected-focus-text-color:
 * option-disabled-background-color:
 * option-disabled-text-color:
 * option-tiny-text-font-size:
 * option-tiny-text-font-weight:
 * option-tiny-text-line-height:
 * option-tiny-padding:
 * option-small-text-font-size:
 * option-small-text-font-weight:
 * option-small-text-line-height:
 * option-small-padding:
 * option-medium-text-font-size:
 * option-medium-text-font-weight:
 * option-medium-text-line-height:
 * option-medium-padding:
 * option-large-text-font-size:
 * option-large-text-font-weight:
 * option-large-text-line-height:
 * option-large-padding:
 * option-giant-text-font-size:
 * option-giant-text-font-weight:
 * option-giant-text-line-height:
 * option-giant-padding:
 **/
import * as ɵngcc0 from '@angular/core';
export declare class NbOptionComponent<T = any> implements OnDestroy, AfterViewInit, NbFocusableOption, NbHighlightableOption {
    protected elementRef: ElementRef;
    protected cd: ChangeDetectorRef;
    protected zone: NgZone;
    protected renderer: Renderer2;
    protected disabledByGroup: boolean;
    /**
     * Option value that will be fired on selection.
     * */
    value: T;
    get disabled(): boolean;
    set disabled(value: boolean);
    protected _disabled: boolean;
    static ngAcceptInputType_disabled: NbBooleanInput;
    /**
     * Fires value when option selection change.
     * */
    selectionChange: EventEmitter<NbOptionComponent<T>>;
    /**
     * Fires when option clicked
     */
    protected click$: Subject<NbOptionComponent<T>>;
    get click(): Observable<NbOptionComponent<T>>;
    selected: boolean;
    protected parent: NbSelectComponent;
    protected alive: boolean;
    /**
     * Component scoped id for aria attributes.
     * */
    id: string;
    constructor(parent: any, elementRef: ElementRef, cd: ChangeDetectorRef, zone: NgZone, renderer: Renderer2);
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    /**
     * Determines should we render checkbox.
     * */
    get withCheckbox(): boolean;
    get content(): any;
    get multiple(): boolean;
    get selectedClass(): boolean;
    get disabledAttribute(): '' | null;
    get tabindex(): string;
    get activeClass(): boolean;
    protected _active: boolean;
    onClick(event: any): void;
    select(): void;
    deselect(): void;
    /**
     * Sets disabled by group state and marks component for check.
     */
    setDisabledByGroupState(disabled: boolean): void;
    protected setSelection(selected: boolean): void;
    focus(): void;
    getLabel(): string;
    setActiveStyles(): void;
    setInactiveStyles(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbOptionComponent<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbOptionComponent<any>, "nb-option", never, {
    "disabled": "disabled";
    "value": "value";
}, {
    "selectionChange": "selectionChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJvcHRpb24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtREE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdEQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCwgTmdab25lLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5iQm9vbGVhbklucHV0IH0gZnJvbSAnLi4vaGVscGVycyc7XG5pbXBvcnQgeyBOYkZvY3VzYWJsZU9wdGlvbiB9IGZyb20gJy4uL2Nkay9hMTF5L2ZvY3VzLWtleS1tYW5hZ2VyJztcbmltcG9ydCB7IE5iSGlnaGxpZ2h0YWJsZU9wdGlvbiB9IGZyb20gJy4uL2Nkay9hMTF5L2Rlc2NlbmRhbnQta2V5LW1hbmFnZXInO1xuaW1wb3J0IHsgTmJTZWxlY3RDb21wb25lbnQgfSBmcm9tICcuLi9zZWxlY3Qvc2VsZWN0LmNvbXBvbmVudCc7XG4vKipcbiAqIE5iT3B0aW9uQ29tcG9uZW50XG4gKlxuICogQHN0eWxlc1xuICpcbiAqIG9wdGlvbi1iYWNrZ3JvdW5kLWNvbG9yOlxuICogb3B0aW9uLXRleHQtY29sb3I6XG4gKiBvcHRpb24tdGV4dC1mb250LWZhbWlseTpcbiAqIG9wdGlvbi1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogb3B0aW9uLWhvdmVyLXRleHQtY29sb3I6XG4gKiBvcHRpb24tYWN0aXZlLWJhY2tncm91bmQtY29sb3I6XG4gKiBvcHRpb24tYWN0aXZlLXRleHQtY29sb3I6XG4gKiBvcHRpb24tZm9jdXMtYmFja2dyb3VuZC1jb2xvcjpcbiAqIG9wdGlvbi1mb2N1cy10ZXh0LWNvbG9yOlxuICogb3B0aW9uLXNlbGVjdGVkLWJhY2tncm91bmQtY29sb3I6XG4gKiBvcHRpb24tc2VsZWN0ZWQtdGV4dC1jb2xvcjpcbiAqIG9wdGlvbi1zZWxlY3RlZC1ob3Zlci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogb3B0aW9uLXNlbGVjdGVkLWhvdmVyLXRleHQtY29sb3I6XG4gKiBvcHRpb24tc2VsZWN0ZWQtYWN0aXZlLWJhY2tncm91bmQtY29sb3I6XG4gKiBvcHRpb24tc2VsZWN0ZWQtYWN0aXZlLXRleHQtY29sb3I6XG4gKiBvcHRpb24tc2VsZWN0ZWQtZm9jdXMtYmFja2dyb3VuZC1jb2xvcjpcbiAqIG9wdGlvbi1zZWxlY3RlZC1mb2N1cy10ZXh0LWNvbG9yOlxuICogb3B0aW9uLWRpc2FibGVkLWJhY2tncm91bmQtY29sb3I6XG4gKiBvcHRpb24tZGlzYWJsZWQtdGV4dC1jb2xvcjpcbiAqIG9wdGlvbi10aW55LXRleHQtZm9udC1zaXplOlxuICogb3B0aW9uLXRpbnktdGV4dC1mb250LXdlaWdodDpcbiAqIG9wdGlvbi10aW55LXRleHQtbGluZS1oZWlnaHQ6XG4gKiBvcHRpb24tdGlueS1wYWRkaW5nOlxuICogb3B0aW9uLXNtYWxsLXRleHQtZm9udC1zaXplOlxuICogb3B0aW9uLXNtYWxsLXRleHQtZm9udC13ZWlnaHQ6XG4gKiBvcHRpb24tc21hbGwtdGV4dC1saW5lLWhlaWdodDpcbiAqIG9wdGlvbi1zbWFsbC1wYWRkaW5nOlxuICogb3B0aW9uLW1lZGl1bS10ZXh0LWZvbnQtc2l6ZTpcbiAqIG9wdGlvbi1tZWRpdW0tdGV4dC1mb250LXdlaWdodDpcbiAqIG9wdGlvbi1tZWRpdW0tdGV4dC1saW5lLWhlaWdodDpcbiAqIG9wdGlvbi1tZWRpdW0tcGFkZGluZzpcbiAqIG9wdGlvbi1sYXJnZS10ZXh0LWZvbnQtc2l6ZTpcbiAqIG9wdGlvbi1sYXJnZS10ZXh0LWZvbnQtd2VpZ2h0OlxuICogb3B0aW9uLWxhcmdlLXRleHQtbGluZS1oZWlnaHQ6XG4gKiBvcHRpb24tbGFyZ2UtcGFkZGluZzpcbiAqIG9wdGlvbi1naWFudC10ZXh0LWZvbnQtc2l6ZTpcbiAqIG9wdGlvbi1naWFudC10ZXh0LWZvbnQtd2VpZ2h0OlxuICogb3B0aW9uLWdpYW50LXRleHQtbGluZS1oZWlnaHQ6XG4gKiBvcHRpb24tZ2lhbnQtcGFkZGluZzpcbiAqKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iT3B0aW9uQ29tcG9uZW50PFQgPSBhbnk+IGltcGxlbWVudHMgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBOYkZvY3VzYWJsZU9wdGlvbiwgTmJIaWdobGlnaHRhYmxlT3B0aW9uIHtcbiAgICBwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIHByb3RlY3RlZCB6b25lOiBOZ1pvbmU7XG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgcHJvdGVjdGVkIGRpc2FibGVkQnlHcm91cDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBPcHRpb24gdmFsdWUgdGhhdCB3aWxsIGJlIGZpcmVkIG9uIHNlbGVjdGlvbi5cbiAgICAgKiAqL1xuICAgIHZhbHVlOiBUO1xuICAgIGdldCBkaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbik7XG4gICAgcHJvdGVjdGVkIF9kaXNhYmxlZDogYm9vbGVhbjtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfZGlzYWJsZWQ6IE5iQm9vbGVhbklucHV0O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHZhbHVlIHdoZW4gb3B0aW9uIHNlbGVjdGlvbiBjaGFuZ2UuXG4gICAgICogKi9cbiAgICBzZWxlY3Rpb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxOYk9wdGlvbkNvbXBvbmVudDxUPj47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiBvcHRpb24gY2xpY2tlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjbGljayQ6IFN1YmplY3Q8TmJPcHRpb25Db21wb25lbnQ8VD4+O1xuICAgIGdldCBjbGljaygpOiBPYnNlcnZhYmxlPE5iT3B0aW9uQ29tcG9uZW50PFQ+PjtcbiAgICBzZWxlY3RlZDogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgcGFyZW50OiBOYlNlbGVjdENvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgYWxpdmU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ29tcG9uZW50IHNjb3BlZCBpZCBmb3IgYXJpYSBhdHRyaWJ1dGVzLlxuICAgICAqICovXG4gICAgaWQ6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQ6IGFueSwgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgY2Q6IENoYW5nZURldGVjdG9yUmVmLCB6b25lOiBOZ1pvbmUsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBzaG91bGQgd2UgcmVuZGVyIGNoZWNrYm94LlxuICAgICAqICovXG4gICAgZ2V0IHdpdGhDaGVja2JveCgpOiBib29sZWFuO1xuICAgIGdldCBjb250ZW50KCk6IGFueTtcbiAgICBnZXQgbXVsdGlwbGUoKTogYm9vbGVhbjtcbiAgICBnZXQgc2VsZWN0ZWRDbGFzcygpOiBib29sZWFuO1xuICAgIGdldCBkaXNhYmxlZEF0dHJpYnV0ZSgpOiAnJyB8IG51bGw7XG4gICAgZ2V0IHRhYmluZGV4KCk6IHN0cmluZztcbiAgICBnZXQgYWN0aXZlQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgX2FjdGl2ZTogYm9vbGVhbjtcbiAgICBvbkNsaWNrKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHNlbGVjdCgpOiB2b2lkO1xuICAgIGRlc2VsZWN0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0cyBkaXNhYmxlZCBieSBncm91cCBzdGF0ZSBhbmQgbWFya3MgY29tcG9uZW50IGZvciBjaGVjay5cbiAgICAgKi9cbiAgICBzZXREaXNhYmxlZEJ5R3JvdXBTdGF0ZShkaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHNldFNlbGVjdGlvbihzZWxlY3RlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICBnZXRMYWJlbCgpOiBzdHJpbmc7XG4gICAgc2V0QWN0aXZlU3R5bGVzKCk6IHZvaWQ7XG4gICAgc2V0SW5hY3RpdmVTdHlsZXMoKTogdm9pZDtcbn1cbiJdfQ==