/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { ComponentFactoryResolver, ComponentFactory, ComponentRef, ElementRef, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { NbComponentSize } from '../component-size';
import { NbComponentStatus } from '../component-status';
import { NbSpinnerComponent } from './spinner.component';
/**
 * Styled spinner directive
 *
 * @stacked-example(Spinner Showcase, spinner/spinner-card.component)
 *
 *
 * ```ts
 * <nb-card [nbSpinner]="loading" nbSpinnerStatus="danger">
 *   <nb-card-body>Card Content</nb-card-body>
 * </nb-card>
 * ```
 *
 * ### Installation
 *
 * Import `NbSpinnerModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbSpinnerModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Could be colored using `status` property
 *
 * @stacked-example(Spinner Colors, spinner/spinner-colors.component)
 *
 * Available in different sizes with `size` property:
 *
 * @stacked-example(Spinner Sizes, spinner/spinner-sizes.component)
 *
 * It is also possible to place it into the button:
 * @stacked-example(Buttons with spinner, spinner/spinner-button.component)
 *
 * Or tabs:
 * @stacked-example(Spinner in tabs, spinner/spinner-tabs.component)
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbSpinnerDirective implements OnInit {
    private directiveView;
    private componentFactoryResolver;
    private renderer;
    private directiveElement;
    private shouldShow;
    spinner: ComponentRef<NbSpinnerComponent>;
    componentFactory: ComponentFactory<NbSpinnerComponent>;
    /**
     * Spinner message shown next to the icon
     * @type {string}
     */
    spinnerMessage: string;
    /**
     * Spinner status color
     * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`.
     */
    spinnerStatus: NbComponentStatus;
    /**
     * Spinner size. Possible values: `tiny`, `small`, `medium` (default), `large`, `giant`
     */
    spinnerSize: NbComponentSize;
    /**
     * Directive value - show or hide spinner
     * @param {boolean} val
     */
    set nbSpinner(val: boolean);
    isSpinnerExist: boolean;
    constructor(directiveView: ViewContainerRef, componentFactoryResolver: ComponentFactoryResolver, renderer: Renderer2, directiveElement: ElementRef);
    ngOnInit(): void;
    hide(): void;
    show(): void;
    setInstanceInputs(instance: NbSpinnerComponent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbSpinnerDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbSpinnerDirective, "[nbSpinner]", never, {
    "spinnerStatus": "nbSpinnerStatus";
    "spinnerSize": "nbSpinnerSize";
    "nbSpinner": "nbSpinner";
    "spinnerMessage": "nbSpinnerMessage";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsic3Bpbm5lci5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpREE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICovXG5pbXBvcnQgeyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudEZhY3RvcnksIENvbXBvbmVudFJlZiwgRWxlbWVudFJlZiwgT25Jbml0LCBSZW5kZXJlcjIsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5iQ29tcG9uZW50U2l6ZSB9IGZyb20gJy4uL2NvbXBvbmVudC1zaXplJztcbmltcG9ydCB7IE5iQ29tcG9uZW50U3RhdHVzIH0gZnJvbSAnLi4vY29tcG9uZW50LXN0YXR1cyc7XG5pbXBvcnQgeyBOYlNwaW5uZXJDb21wb25lbnQgfSBmcm9tICcuL3NwaW5uZXIuY29tcG9uZW50Jztcbi8qKlxuICogU3R5bGVkIHNwaW5uZXIgZGlyZWN0aXZlXG4gKlxuICogQHN0YWNrZWQtZXhhbXBsZShTcGlubmVyIFNob3djYXNlLCBzcGlubmVyL3NwaW5uZXItY2FyZC5jb21wb25lbnQpXG4gKlxuICpcbiAqIGBgYHRzXG4gKiA8bmItY2FyZCBbbmJTcGlubmVyXT1cImxvYWRpbmdcIiBuYlNwaW5uZXJTdGF0dXM9XCJkYW5nZXJcIj5cbiAqICAgPG5iLWNhcmQtYm9keT5DYXJkIENvbnRlbnQ8L25iLWNhcmQtYm9keT5cbiAqIDwvbmItY2FyZD5cbiAqIGBgYFxuICpcbiAqICMjIyBJbnN0YWxsYXRpb25cbiAqXG4gKiBJbXBvcnQgYE5iU3Bpbm5lck1vZHVsZWAgdG8geW91ciBmZWF0dXJlIG1vZHVsZS5cbiAqIGBgYHRzXG4gKiBATmdNb2R1bGUoe1xuICogICBpbXBvcnRzOiBbXG4gKiAgICAgLy8gLi4uXG4gKiAgICAgTmJTcGlubmVyTW9kdWxlLFxuICogICBdLFxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBQYWdlTW9kdWxlIHsgfVxuICogYGBgXG4gKiAjIyMgVXNhZ2VcbiAqXG4gKiBDb3VsZCBiZSBjb2xvcmVkIHVzaW5nIGBzdGF0dXNgIHByb3BlcnR5XG4gKlxuICogQHN0YWNrZWQtZXhhbXBsZShTcGlubmVyIENvbG9ycywgc3Bpbm5lci9zcGlubmVyLWNvbG9ycy5jb21wb25lbnQpXG4gKlxuICogQXZhaWxhYmxlIGluIGRpZmZlcmVudCBzaXplcyB3aXRoIGBzaXplYCBwcm9wZXJ0eTpcbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKFNwaW5uZXIgU2l6ZXMsIHNwaW5uZXIvc3Bpbm5lci1zaXplcy5jb21wb25lbnQpXG4gKlxuICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBwbGFjZSBpdCBpbnRvIHRoZSBidXR0b246XG4gKiBAc3RhY2tlZC1leGFtcGxlKEJ1dHRvbnMgd2l0aCBzcGlubmVyLCBzcGlubmVyL3NwaW5uZXItYnV0dG9uLmNvbXBvbmVudClcbiAqXG4gKiBPciB0YWJzOlxuICogQHN0YWNrZWQtZXhhbXBsZShTcGlubmVyIGluIHRhYnMsIHNwaW5uZXIvc3Bpbm5lci10YWJzLmNvbXBvbmVudClcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJTcGlubmVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIGRpcmVjdGl2ZVZpZXc7XG4gICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGRpcmVjdGl2ZUVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBzaG91bGRTaG93O1xuICAgIHNwaW5uZXI6IENvbXBvbmVudFJlZjxOYlNwaW5uZXJDb21wb25lbnQ+O1xuICAgIGNvbXBvbmVudEZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8TmJTcGlubmVyQ29tcG9uZW50PjtcbiAgICAvKipcbiAgICAgKiBTcGlubmVyIG1lc3NhZ2Ugc2hvd24gbmV4dCB0byB0aGUgaWNvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgc3Bpbm5lck1lc3NhZ2U6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGlubmVyIHN0YXR1cyBjb2xvclxuICAgICAqIGBiYXNpY2AsIGBwcmltYXJ5YCwgYGluZm9gLCBgc3VjY2Vzc2AsIGB3YXJuaW5nYCwgYGRhbmdlcmAsIGBjb250cm9sYC5cbiAgICAgKi9cbiAgICBzcGlubmVyU3RhdHVzOiBOYkNvbXBvbmVudFN0YXR1cztcbiAgICAvKipcbiAgICAgKiBTcGlubmVyIHNpemUuIFBvc3NpYmxlIHZhbHVlczogYHRpbnlgLCBgc21hbGxgLCBgbWVkaXVtYCAoZGVmYXVsdCksIGBsYXJnZWAsIGBnaWFudGBcbiAgICAgKi9cbiAgICBzcGlubmVyU2l6ZTogTmJDb21wb25lbnRTaXplO1xuICAgIC8qKlxuICAgICAqIERpcmVjdGl2ZSB2YWx1ZSAtIHNob3cgb3IgaGlkZSBzcGlubmVyXG4gICAgICogQHBhcmFtIHtib29sZWFufSB2YWxcbiAgICAgKi9cbiAgICBzZXQgbmJTcGlubmVyKHZhbDogYm9vbGVhbik7XG4gICAgaXNTcGlubmVyRXhpc3Q6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZGlyZWN0aXZlVmlldzogVmlld0NvbnRhaW5lclJlZiwgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGRpcmVjdGl2ZUVsZW1lbnQ6IEVsZW1lbnRSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgaGlkZSgpOiB2b2lkO1xuICAgIHNob3coKTogdm9pZDtcbiAgICBzZXRJbnN0YW5jZUlucHV0cyhpbnN0YW5jZTogTmJTcGlubmVyQ29tcG9uZW50KTogdm9pZDtcbn1cbiJdfQ==