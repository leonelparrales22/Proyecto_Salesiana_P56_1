import { ElementRef, OnDestroy, OnInit, TemplateRef, Renderer2, ComponentFactoryResolver, AfterViewChecked } from '@angular/core';
import { NbFocusTrap, NbFocusTrapFactoryService } from '../cdk/a11y/focus-trap';
import { NbComponentType } from '../cdk/overlay/mapping';
import { NbOverlayContainerComponent } from '../cdk/overlay/overlay-container';
import { NbWindowConfig } from './window.options';
import { NbWindowRef } from './window-ref';
import * as ɵngcc0 from '@angular/core';
export declare class NbWindowComponent implements OnInit, AfterViewChecked, OnDestroy {
    content: TemplateRef<any> | NbComponentType;
    context: Object;
    windowRef: NbWindowRef;
    config: NbWindowConfig;
    protected focusTrapFactory: NbFocusTrapFactoryService;
    protected elementRef: ElementRef;
    protected renderer: Renderer2;
    cfr: ComponentFactoryResolver;
    get isFullScreen(): boolean;
    get maximized(): boolean;
    get minimized(): boolean;
    overlayContainer: NbOverlayContainerComponent;
    protected focusTrap: NbFocusTrap;
    constructor(content: TemplateRef<any> | NbComponentType, context: Object, windowRef: NbWindowRef, config: NbWindowConfig, focusTrapFactory: NbFocusTrapFactoryService, elementRef: ElementRef, renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    minimize(): void;
    maximize(): void;
    fullScreen(): void;
    maximizeOrFullScreen(): void;
    close(): void;
    protected attachTemplate(): void;
    protected attachComponent(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbWindowComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbWindowComponent, "nb-window", never, {
    "cfr": "cfr";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ3aW5kb3cuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFJlbmRlcmVyMiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBBZnRlclZpZXdDaGVja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYkZvY3VzVHJhcCwgTmJGb2N1c1RyYXBGYWN0b3J5U2VydmljZSB9IGZyb20gJy4uL2Nkay9hMTF5L2ZvY3VzLXRyYXAnO1xuaW1wb3J0IHsgTmJDb21wb25lbnRUeXBlIH0gZnJvbSAnLi4vY2RrL292ZXJsYXkvbWFwcGluZyc7XG5pbXBvcnQgeyBOYk92ZXJsYXlDb250YWluZXJDb21wb25lbnQgfSBmcm9tICcuLi9jZGsvb3ZlcmxheS9vdmVybGF5LWNvbnRhaW5lcic7XG5pbXBvcnQgeyBOYldpbmRvd0NvbmZpZyB9IGZyb20gJy4vd2luZG93Lm9wdGlvbnMnO1xuaW1wb3J0IHsgTmJXaW5kb3dSZWYgfSBmcm9tICcuL3dpbmRvdy1yZWYnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJXaW5kb3dDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSB7XG4gICAgY29udGVudDogVGVtcGxhdGVSZWY8YW55PiB8IE5iQ29tcG9uZW50VHlwZTtcbiAgICBjb250ZXh0OiBPYmplY3Q7XG4gICAgd2luZG93UmVmOiBOYldpbmRvd1JlZjtcbiAgICBjb25maWc6IE5iV2luZG93Q29uZmlnO1xuICAgIHByb3RlY3RlZCBmb2N1c1RyYXBGYWN0b3J5OiBOYkZvY3VzVHJhcEZhY3RvcnlTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xuICAgIGdldCBpc0Z1bGxTY3JlZW4oKTogYm9vbGVhbjtcbiAgICBnZXQgbWF4aW1pemVkKCk6IGJvb2xlYW47XG4gICAgZ2V0IG1pbmltaXplZCgpOiBib29sZWFuO1xuICAgIG92ZXJsYXlDb250YWluZXI6IE5iT3ZlcmxheUNvbnRhaW5lckNvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgZm9jdXNUcmFwOiBOYkZvY3VzVHJhcDtcbiAgICBjb25zdHJ1Y3Rvcihjb250ZW50OiBUZW1wbGF0ZVJlZjxhbnk+IHwgTmJDb21wb25lbnRUeXBlLCBjb250ZXh0OiBPYmplY3QsIHdpbmRvd1JlZjogTmJXaW5kb3dSZWYsIGNvbmZpZzogTmJXaW5kb3dDb25maWcsIGZvY3VzVHJhcEZhY3Rvcnk6IE5iRm9jdXNUcmFwRmFjdG9yeVNlcnZpY2UsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBtaW5pbWl6ZSgpOiB2b2lkO1xuICAgIG1heGltaXplKCk6IHZvaWQ7XG4gICAgZnVsbFNjcmVlbigpOiB2b2lkO1xuICAgIG1heGltaXplT3JGdWxsU2NyZWVuKCk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYXR0YWNoVGVtcGxhdGUoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYXR0YWNoQ29tcG9uZW50KCk6IHZvaWQ7XG59XG4iXX0=