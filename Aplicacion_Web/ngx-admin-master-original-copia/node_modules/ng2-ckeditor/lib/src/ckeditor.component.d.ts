import { EventEmitter, NgZone, QueryList, AfterViewInit, SimpleChanges, OnChanges } from '@angular/core';
import { CKButtonDirective } from './ckbutton.directive';
import { CKGroupDirective } from './ckgroup.directive';
/**
 * CKEditor component
 * Usage :
 *  <ckeditor [(ngModel)]="data" [config]="{...}" debounce="500"></ckeditor>
 */
import * as ɵngcc0 from '@angular/core';
export declare class CKEditorComponent implements OnChanges, AfterViewInit {
    private zone;
    config: any;
    readonly: boolean;
    debounce: string;
    change: EventEmitter<{}>;
    editorChange: EventEmitter<{}>;
    ready: EventEmitter<{}>;
    blur: EventEmitter<{}>;
    focus: EventEmitter<{}>;
    contentDom: EventEmitter<{}>;
    fileUploadRequest: EventEmitter<{}>;
    fileUploadResponse: EventEmitter<{}>;
    paste: EventEmitter<{}>;
    drop: EventEmitter<{}>;
    host: any;
    toolbarButtons: QueryList<CKButtonDirective>;
    toolbarGroups: QueryList<CKGroupDirective>;
    _value: string;
    instance: any;
    debounceTimeout: any;
    /**
     * Constructor
     */
    constructor(zone: NgZone);
    value: any;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * On component destroy
     */
    ngOnDestroy(): void;
    /**
     * On component view init
     */
    ngAfterViewInit(): void;
    /**
     * On component view checked
     */
    ngAfterViewChecked(): void;
    /**
     * Value update process
     */
    updateValue(value: any): void;
    /**
     * CKEditor init
     */
    ckeditorInit(config: any): void;
    /**
     * Implements ControlValueAccessor
     */
    writeValue(value: any): void;
    onChange(_: any): void;
    onTouched(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private documentContains;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CKEditorComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CKEditorComponent, "ckeditor", never, {
    "value": "value";
    "config": "config";
    "readonly": "readonly";
    "debounce": "debounce";
}, {
    "change": "change";
    "editorChange": "editorChange";
    "ready": "ready";
    "blur": "blur";
    "focus": "focus";
    "contentDom": "contentDom";
    "fileUploadRequest": "fileUploadRequest";
    "fileUploadResponse": "fileUploadResponse";
    "paste": "paste";
    "drop": "drop";
}, ["toolbarButtons", "toolbarGroups"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2tlZGl0b3IuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNrZWRpdG9yLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgUXVlcnlMaXN0LCBBZnRlclZpZXdJbml0LCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENLQnV0dG9uRGlyZWN0aXZlIH0gZnJvbSAnLi9ja2J1dHRvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQ0tHcm91cERpcmVjdGl2ZSB9IGZyb20gJy4vY2tncm91cC5kaXJlY3RpdmUnO1xuLyoqXG4gKiBDS0VkaXRvciBjb21wb25lbnRcbiAqIFVzYWdlIDpcbiAqICA8Y2tlZGl0b3IgWyhuZ01vZGVsKV09XCJkYXRhXCIgW2NvbmZpZ109XCJ7Li4ufVwiIGRlYm91bmNlPVwiNTAwXCI+PC9ja2VkaXRvcj5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ0tFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQge1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBjb25maWc6IGFueTtcbiAgICByZWFkb25seTogYm9vbGVhbjtcbiAgICBkZWJvdW5jZTogc3RyaW5nO1xuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBlZGl0b3JDaGFuZ2U6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgcmVhZHk6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgYmx1cjogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBmb2N1czogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjb250ZW50RG9tOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGZpbGVVcGxvYWRSZXF1ZXN0OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGZpbGVVcGxvYWRSZXNwb25zZTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBwYXN0ZTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBkcm9wOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGhvc3Q6IGFueTtcbiAgICB0b29sYmFyQnV0dG9uczogUXVlcnlMaXN0PENLQnV0dG9uRGlyZWN0aXZlPjtcbiAgICB0b29sYmFyR3JvdXBzOiBRdWVyeUxpc3Q8Q0tHcm91cERpcmVjdGl2ZT47XG4gICAgX3ZhbHVlOiBzdHJpbmc7XG4gICAgaW5zdGFuY2U6IGFueTtcbiAgICBkZWJvdW5jZVRpbWVvdXQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHpvbmU6IE5nWm9uZSk7XG4gICAgdmFsdWU6IGFueTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBPbiBjb21wb25lbnQgZGVzdHJveVxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogT24gY29tcG9uZW50IHZpZXcgaW5pdFxuICAgICAqL1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9uIGNvbXBvbmVudCB2aWV3IGNoZWNrZWRcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBWYWx1ZSB1cGRhdGUgcHJvY2Vzc1xuICAgICAqL1xuICAgIHVwZGF0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENLRWRpdG9yIGluaXRcbiAgICAgKi9cbiAgICBja2VkaXRvckluaXQoY29uZmlnOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3JcbiAgICAgKi9cbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIG9uQ2hhbmdlKF86IGFueSk6IHZvaWQ7XG4gICAgb25Ub3VjaGVkKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICBwcml2YXRlIGRvY3VtZW50Q29udGFpbnM7XG59XG4iXX0=